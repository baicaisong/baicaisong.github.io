<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>用 TypeScript 实现 React （二）———— JSX 的编译</title>
    <link href="/2021/02/27/build-your-own-react2/"/>
    <url>/2021/02/27/build-your-own-react2/</url>
    
    <content type="html"><![CDATA[<p>如果细心一点会发现, <code>ReactDOM.render</code> 的第一个参数支持的类型为 <a href="https://zh-hans.reactjs.org/docs/introducing-jsx.html">JSX</a> 而不是 string。因此接下来需要将参数支持 JSX 类型。</p><a id="more"></a><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="http://localhost:5000/2021/02/27/build-your-own-react/">从 HTML 开始</a></li><li><a href="https://baicaisong.github.io/2021/02/27/build-your-own-react2/">JSX 的编译</a><br>…</li></ol><p>以下是第二节的内容：JSX 的编译</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p><img src="https://i.loli.net/2021/02/27/fWZpbwonV2BIE1P.png" alt="流程图"><br>例如一个 JSX 语句 <code>&lt;h1&gt;hello TypeScript&lt;/h1&gt;</code>:</p><ol><li>React v17 是通过<a href="https://babeljs.io/">Babel</a> 或 TypeScript 将 JSX 转化为<code>_jsx(&#39;h1&#39;,&#123;children:&#39;hello TypeScript&#39;&#125;,void 0)</code></li><li>调用方法<code>_jsx(type,children,key)</code>生成 string</li><li>得到 <code>&quot;&lt;h1&gt;hello TypeScript&lt;/h1&gt;&quot;</code> 就是我们想要的结果。</li></ol><h2 id="选择-Babel-编译-JSX"><a href="#选择-Babel-编译-JSX" class="headerlink" title="选择 Babel 编译 JSX"></a>选择 Babel 编译 JSX</h2><blockquote><p>如果你在使用 JSX 时，使用 React 以外的库，你可以使用 <a href="https://babeljs.io/docs/en/babel-preset-react#importsource">importSource</a> 选项从该库中引入</p></blockquote><p>编译生成的 <code>_jsx</code> 会默认 <code>require(&quot;react/jsx-runtime&quot;)</code>,使用 babel <code>importSource:&#39;../runtime&#39;</code> 可以重定向为 <code>require(&quot;../runtime/jsx-runtime&quot;)</code> 以此来指向开发者自己的代码。<br>此特性 TypeScript 似乎没有提供，所以这次选择 Babel 来做 JSX 的编译</p><h3 id="安装-Babel"><a href="#安装-Babel" class="headerlink" title="安装 Babel"></a>安装 Babel</h3><p>安装以下依赖</p><ul><li>@babel/cli</li><li>@babel/core</li><li>@babel/plugin-transform-react-jsx ———— 将 JSX 转化_jsx()接受的参数</li><li>@babel/preset-typescript ———— 仍然需要编译 ts 类型</li></ul><p><code>yarn add @babel/cli @babel/core @babel/plugin-transform-react-jsx @babel/preset-typescript</code></p><blockquote><p>在 React v17 之前，JSX 只能被转化为 <code>React.createElement</code></p></blockquote><p><code>React.createElement</code> 和 <code>_jsx</code> 的区别看<a href="https://zh-hans.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html">这里</a></p><h3 id="配置-babel"><a href="#配置-babel" class="headerlink" title="配置 babel"></a>配置 babel</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// .babelrc</span><br>&#123;<br>  <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;@babel/preset-typescript&quot;</span>],<br>  <span class="hljs-attr">&quot;plugins&quot;</span>: [<br>    [<br>      <span class="hljs-string">&quot;@babel/plugin-transform-react-jsx&quot;</span>,<br>      &#123;<br>        <span class="hljs-attr">&quot;runtime&quot;</span>: <span class="hljs-string">&quot;automatic&quot;</span>,<br>        <span class="hljs-attr">&quot;importSource&quot;</span>: <span class="hljs-string">&quot;../runtime&quot;</span><br>      &#125;<br>    ]<br>  ]<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><ol><li>修改 index.ts 文件，使其支持 JSX 类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-comment">// index.tsx</span><br><span class="hljs-comment">// &lt;App /&gt;是一个 JSX；使用JSX的文件后缀改为.tsx</span><br><span class="hljs-keyword">import</span> &#123; reactDomRender &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../runtime/jsx-runtime&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      title<br>      &lt;button <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;button&lt;/button&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br><br>reactDomRender(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="编译-tsx-文件"><a href="#编译-tsx-文件" class="headerlink" title="编译 tsx 文件"></a>编译 tsx 文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//package.json</span><br>  &quot;scripts&quot;: &#123;<br>    &quot;build-src&quot;: &quot;npx babel --out-dir lib src --extensions &#x27;.ts,.tsx&#x27;&quot;,<br>    &quot;build-runtime&quot;: &quot;npx babel --out-dir runtime runtime --extensions &#x27;.ts,.tsx&#x27;&quot;,<br>    &quot;build&quot;: &quot;yarn build-src &amp;&amp; yarn build-runtime&quot;<br>  &#125;,<br></code></pre></td></tr></table></figure><p>执行<code>yarn build</code>，在 lib 下生成了 index.js 文件,在 runtime 下生成了 jsx-runtime.js 文件<br>修改 index.html 的引用路径为<code>src=&quot;./lib/index.js&quot;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// lib/index.js</span><br><span class="hljs-keyword">import</span> &#123; reactDomRender &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../runtime/jsx-runtime&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; jsx <span class="hljs-keyword">as</span> _jsx &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../runtime/jsx-runtime&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; jsxs <span class="hljs-keyword">as</span> _jsxs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../runtime/jsx-runtime&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> _jsxs(<span class="hljs-string">&quot;div&quot;</span>, &#123;<br>    children: [<br>      <span class="hljs-string">&quot;title&quot;</span>,<br>      _jsx(<span class="hljs-string">&quot;button&quot;</span>, &#123;<br>        type: <span class="hljs-string">&quot;submit&quot;</span>,<br>        children: <span class="hljs-string">&quot;button&quot;</span>,<br>      &#125;),<br>    ],<br>  &#125;);<br>&#125;<br><br>reactDomRender(_jsx(App, &#123;&#125;), <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="编写-jsx-方法"><a href="#编写-jsx-方法" class="headerlink" title="编写_jsx 方法"></a>编写<code>_jsx</code> 方法</h2><ol><li>../runtime/jsx-runtime.js 下已经提供了 reactDomRender 方法，接着把方法 jsx 写一下</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactDomRender</span>(<span class="hljs-params">element: <span class="hljs-built_in">string</span>, container: Element</span>) </span>&#123;<br>  container.innerHTML = element;<br>&#125;<br><br><span class="hljs-keyword">type</span> BaseElementType = <span class="hljs-string">&quot;div&quot;</span> | <span class="hljs-string">&quot;button&quot;</span>;<br><br><span class="hljs-keyword">type</span> Children = &#123; <span class="hljs-attr">children</span>: <span class="hljs-built_in">string</span>[] | <span class="hljs-built_in">string</span> &#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> jsxs = jsx;<br><span class="hljs-keyword">interface</span> TypeFunction &#123;<br>  (): <span class="hljs-built_in">string</span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsx</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">  <span class="hljs-keyword">type</span>: BaseElementType | TypeFunction,</span></span><br><span class="hljs-function"><span class="hljs-params">  props: &#123; [key <span class="hljs-keyword">in</span> <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> &#125; &amp; Partial&lt;Children&gt;</span></span><br><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-keyword">type</span> === <span class="hljs-string">&quot;function&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">type</span>();<br>  <span class="hljs-keyword">const</span> children = props?.children;<br>  <span class="hljs-keyword">const</span> attributes = <span class="hljs-built_in">Object</span>.entries(props).filter(<br>    ([key]) =&gt; key !== <span class="hljs-string">&quot;children&quot;</span><br>  );<br>  <span class="hljs-keyword">const</span> attributesString =<br>    <span class="hljs-string">&quot; &quot;</span> + attributes.map(<span class="hljs-function">(<span class="hljs-params">[key, value]</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>=&quot;<span class="hljs-subst">$&#123;value&#125;</span>&quot;`</span>).join(<span class="hljs-string">&quot; &quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;<span class="hljs-subst">$&#123;<span class="hljs-keyword">type</span>&#125;</span><span class="hljs-subst">$&#123;attributesString&#125;</span>&gt;<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-string"><span class="hljs-subst">    children ? renderChildren(children) : <span class="hljs-string">&quot;&quot;</span></span></span><br><span class="hljs-string"><span class="hljs-subst">  &#125;</span>&lt;/<span class="hljs-subst">$&#123;<span class="hljs-keyword">type</span>&#125;</span>&gt;`</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderChildren</span>(<span class="hljs-params">children: <span class="hljs-built_in">string</span>[] | <span class="hljs-built_in">string</span></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> children === <span class="hljs-string">&quot;string&quot;</span> ? children : children.join(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>页面展示了想要的效果<br><img src="https://i.loli.net/2021/03/01/Sj3I6gv18UqtpnF.png" alt="结果"></p>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 TypeScript 实现 React （一）———— 从 HTML 开始</title>
    <link href="/2021/02/27/build-your-own-react/"/>
    <url>/2021/02/27/build-your-own-react/</url>
    
    <content type="html"><![CDATA[<p>想用 TypeScript 实现一个简单的 React，以更好的了解 React 的基本运作方式。<br>以当前 v17.0.1 为目标。</p><a id="more"></a><h2 id="前提技能"><a href="#前提技能" class="headerlink" title="前提技能"></a>前提技能</h2><ul><li>会使用命令行终端</li><li>了解 TypeScript 和 React 的基本用法</li><li>了解一点点算法，比如递归怎么写</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="http://localhost:5000/2021/02/27/build-your-own-react/">从 HTML 开始</a></li><li><a href="https://baicaisong.github.io/2021/02/27/build-your-own-react2/">JSX 的编译</a><br>…</li></ol><p>以下是第一节的内容：从 HTML 开始</p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>新建空文件夹，目录结构：<br>|– index.html<br>|– index.js</p><p>用浏览器打开 index.html 可以得到一个页面，其中引入了一个脚本文件 index.js，调用它来使 HTML 的内容改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--index.html--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span>content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.js</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>).innerHTML = <span class="hljs-string">&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="实现-ReactDOM-render-方法"><a href="#实现-ReactDOM-render-方法" class="headerlink" title="实现 ReactDOM.render 方法"></a>实现 <code>ReactDOM.render</code> 方法</h2><ol><li>如果用 <code>create-react-app</code> 新建一个项目，在项目的 src/index.js 文件中，有一个 <code>ReactDOM.render</code> 方法</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReactDOM</span>.</span></span>render(<br>  &lt;App /&gt;,<br>  document.get<span class="hljs-constructor">ElementById(&#x27;<span class="hljs-params">root</span>&#x27;)</span>,<br>)<br></code></pre></td></tr></table></figure><p>其作用和上文的 index.js 相同，获取 root 元素，并将新元素嵌入。</p><ol start="2"><li>新建一个方法 <code>reactDomRender</code> ,可接受两个参数 <code>(element, container)</code></li></ol><p>新建一个 index.ts 来使用 TypeScript：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ts"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactDomRender</span>(<span class="hljs-params">element: <span class="hljs-built_in">string</span>, container: HTMLElement</span>) </span>&#123;<br>  container.innerHTML = element;<br>&#125;<br><br>reactDomRender(<span class="hljs-string">&quot;&lt;h1&gt;hello TypeScript&lt;/h1&gt;&quot;</span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><ol start="3"><li>编译此文件 <code>tsc index.ts</code> 生成对应的 js 文件，刷新页面控制台报错：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Access</span> <span class="hljs-keyword">to</span> script at <span class="hljs-string">&#x27;file:///Users/workspace/react/index.js&#x27;</span> <span class="hljs-keyword">from</span> origin <span class="hljs-string">&#x27;null&#x27;</span> has been blocked <span class="hljs-keyword">by</span> CORS <span class="hljs-keyword">policy</span>: <span class="hljs-keyword">Cross</span> origin requests are <span class="hljs-keyword">only</span> supported <span class="hljs-keyword">for</span> protocol schemes: http, data, chrome, chrome-<span class="hljs-keyword">extension</span>, chrome-untrusted, https.<br><span class="hljs-keyword">index</span>.html:<span class="hljs-number">9</span> <span class="hljs-keyword">GET</span> file:///Users/workspace/p/<span class="hljs-keyword">index</span>.js net::ERR_FAILED<br></code></pre></td></tr></table></figure><ol start="4"><li>使用<a href="https://www.npmjs.com/package/http-server">http-server</a>启动本地静态服务:</li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">yarn <span class="hljs-built_in">global</span> <span class="hljs-built_in">add</span> <span class="hljs-keyword">http</span>-server<br>cd ..<br>serve react<span class="hljs-comment"> //serve [your folder name]</span><br></code></pre></td></tr></table></figure><p>打开对应地址，页面展示 hello TypeScript</p><h2 id="分离-reactDomRender-函数"><a href="#分离-reactDomRender-函数" class="headerlink" title="分离 reactDomRender 函数"></a>分离 reactDomRender 函数</h2><p>因为 reactDomRender 是一个库函数，期望将它从另一个文件引用过来。</p><p>文件结构：<br>|– index.html————记得修改 script 引用路径 <code>src=&quot;./src/index.js&quot;</code><br>| |– runtime<br>| | |- jsx-runtime.ts ————导出 reactDomRender<br>| |– src/ ————编写的源代码<br>| | |– index.ts———–被 index.html 引用</p><ol><li>新建一个文件 <code>runtime/jsx-runtime.ts</code>,将 reactDomRender export 出来</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//runtime/jsx-runtime.ts</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reactDomRender</span>(<span class="hljs-params">element: string, container: Element</span>) </span>&#123;<br>  container.innerHTML = element;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// index.ts</span><br><span class="hljs-keyword">import</span> &#123; reactDomRender &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../runtime/jsx-runtime&quot;</span>;<br>reactDomRender(<span class="hljs-string">&quot;&lt;h1&gt;11&lt;/h1&gt;&quot;</span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;root&quot;</span>));<br></code></pre></td></tr></table></figure><p>执行编译<code>tsc src/index.ts</code>,会发现两个文件都生成了对应的 js 文件</p><ol start="2"><li>浏览器报错</li></ol><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">Uncaught ReferenceError: <span class="hljs-keyword">exports</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> defined<br>    at <span class="hljs-keyword">index</span>.js:<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>因为 TypeScript 将 ts 文件编译成 js 时，默认编译成<code>es5</code>，而 es5 不包括模块化系统，即不支持<code>export</code> &amp; <code>import</code>，解决方案是在编译时将结果指定成<code>es6</code>：<code>tsc src/index.ts --target &#39;es6&#39;</code></p><ol start="3"><li>报错*2</li></ol><p><code>index.js:1 Uncaught SyntaxError: Cannot use import statement outside a module</code></p><p>因为在 es6 的时候，使用 export&amp;import 时，需要将 html 中声明的标签<script></script>类型 type 指定为 module</p><p>修改 index.html 文件<code>&lt;script type=&quot;module&quot; src=&quot;./src/index.js&quot;&gt;&lt;/script&gt;</code></p><ol start="4"><li>报错*3<br><code>index.js:1 GET http://localhost:52710/runtime/jsx-runtime net::ERR_ABORTED 404 (Not Found)</code></li></ol><p>即没有找到对应的 runtime/jsx-runtime 文件，从 index.js 文件中发现<code>import &#123; reactDomRender &#125; from &quot;../runtime/jsx-runtime&quot;;</code> ，指明<code>jsx-runtime</code>为<code>jsx-runtime.js</code>可解决。</p><p>页面重新展示 hello TypeScript</p>]]></content>
    
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 GitHub Actions 实现Hexo的自动部署</title>
    <link href="/2021/02/22/github-action/"/>
    <url>/2021/02/22/github-action/</url>
    
    <content type="html"><![CDATA[<p>期望有一个仓库来保存原始的 markdown 文件，并在每次 push 时将代码自动编译并发布至另一个仓库 <code>[yourname].github.io</code>，实现 GitHub Pages 的更新。</p><a id="more"></a><h2 id="新建一个仓库来保存原始代码"><a href="#新建一个仓库来保存原始代码" class="headerlink" title="新建一个仓库来保存原始代码"></a>新建一个仓库来保存原始代码</h2><p>仓库<code>[yourname].github.io.git</code>中只保存编译后的文件，所以需要再建一个仓库来保存原 markdown 文件。<br>新建一个仓库名为 <code>blog</code> ,把源代码 push 到此仓库</p><h2 id="配置密钥"><a href="#配置密钥" class="headerlink" title="配置密钥"></a>配置密钥</h2><p>将之前关联到 github 的 ssh 密钥分别存入两个仓库的 secret 中</p><ol><li><code>/blog/settings/secrets</code> 下 新建 secret</li></ol><ul><li>Name :<code>HEXO_DEPLOY_PRI</code></li><li>Vaule : <code>cat ~/.ssh/id_ed25519</code>里的数据</li></ul><ol start="2"><li><code>/yourname.github.io/settings/secrets</code>下 新建 secret</li></ol><ul><li>Name :<code>HEXO_DEPLOY_PUB</code></li><li>Vaule : <code>cat ~/.ssh/id_ed25519.pub</code>里的数据</li></ul><h2 id="编写-action-脚本"><a href="#编写-action-脚本" class="headerlink" title="编写 action 脚本"></a>编写 action 脚本</h2><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>在 blog 仓库根目录下创建 <code>.github/workflows/deploy.yml</code> 文件，内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">CI</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">GIT_USER:</span> <span class="hljs-string">baicaisong</span><br>  <span class="hljs-attr">GIT_EMAIL:</span> <span class="hljs-string">im.jwsong@gmail.com</span><br>  <span class="hljs-attr">THEME_REPO:</span> <span class="hljs-string">theme-next/hexo-theme-next</span><br>  <span class="hljs-attr">THEME_BRANCH:</span> <span class="hljs-string">master</span><br>  <span class="hljs-attr">DEPLOY_REPO:</span> <span class="hljs-string">baicaisong/baicaisong.github.io</span><br>  <span class="hljs-attr">DEPLOY_BRANCH:</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">on</span> <span class="hljs-string">node</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">and</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.os</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">strategy:</span><br>      <span class="hljs-attr">matrix:</span><br>        <span class="hljs-attr">os:</span> [<span class="hljs-string">ubuntu-latest</span>]<br>        <span class="hljs-attr">node_version:</span> [<span class="hljs-number">14.</span><span class="hljs-string">x</span>]<br><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">theme</span> <span class="hljs-string">repo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repository:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.THEME_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.THEME_BRANCH</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">themes/next</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">deploy</span> <span class="hljs-string">repo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">repository:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.DEPLOY_REPO</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">ref:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">env.DEPLOY_BRANCH</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">.deploy_git</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">matrix.node_version</span> <span class="hljs-string">&#125;&#125;</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Configuration</span> <span class="hljs-string">environment</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">HEXO_DEPLOY_PRI:</span> <span class="hljs-string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.ssh/</span><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$HEXO_DEPLOY_PRI&quot;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">~/.ssh/id_ed25519</span><br>          <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_ed25519</span><br>          <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">$GIT_USER</span><br>          <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">$GIT_EMAIL</span><br>          <span class="hljs-string">cp</span> <span class="hljs-string">_config.theme.yml</span> <span class="hljs-string">themes/next/_config.yml</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">yarn</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">yarn</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li>name: 名字</li><li>on: 触发条件，此处指当 push master 分支时会执行</li><li>env: 环境变量，会在 jobs 中调用</li><li>jobs:任务列表。<ul><li>name 任务名称</li><li>runs-on 任务所需容器，可选值：ubuntu-latest、windows-latest、macos-latest。</li><li>strategy</li><li>steps 任务步骤</li></ul></li></ul><h3 id="steps-参数说明"><a href="#steps-参数说明" class="headerlink" title="steps 参数说明"></a>steps 参数说明</h3><ul><li>name:步骤名</li><li>uses:所要调用的第三方 Action，<a href="https://github.com/actions">查看更多</a>。<br>此处用了两个 Action<ul><li><code>actions/checkout@v2</code> —— 实现 Checkout 一个 git 仓库到容器。</li><li><code>actions/setup-node@v1</code> —— 可以配置容器 Node.js 环境</li></ul></li><li>with:传给 Action 的参数，具体可以查看所使用 Action 的说明。</li></ul><ol><li>将此仓库 checkout 到容器中</li></ol><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs delphi">- <span class="hljs-keyword">name</span>: Checkout<br>  <span class="hljs-keyword">uses</span>: actions/checkout@v2<br></code></pre></td></tr></table></figure><p>不带 with 参数时默认操作当前仓库</p><ol start="2"><li>复原 .deploy_git</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">- name: Checkout deploy repo</span><br><span class="xml">  uses: actions/checkout@v2</span><br><span class="xml">  with:</span><br><span class="xml">    repository: $</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">env.DEPLOY_REPO</span> &#125;&#125;</span><br><span class="xml">    ref: $</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">env.DEPLOY_BRANCH</span> &#125;&#125;</span><br><span class="xml">    path: .deploy_git</span><br></code></pre></td></tr></table></figure><p>此命令的意思为将第三方仓库 <code>git@github.com:baicaisong/baicaisong.github.io.git</code> 的 master 分支 checkout 到路径 .deploy_git 下。</p><ol start="3"><li>安装 Node.js 版本 v14 到容器中</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">- name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;<br>  uses: actions/setup-<span class="hljs-keyword">node</span><span class="hljs-title">@v1</span><br>  with:<br>    <span class="hljs-keyword">node</span>-version:<span class="hljs-title"> $</span>&#123;&#123; matrix.node_version &#125;&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>复原 configuration</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">- name: Configuration environment<br>  env:<br>    HEXO_DEPLOY_PRI: <span class="hljs-variable">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;</span>&#125;<br>  run: |<br>    mkdir -p ~<span class="hljs-regexp">/.ssh/</span><br>    echo <span class="hljs-string">&quot;$HEXO_DEPLOY_PRI&quot;</span> &gt; ~<span class="hljs-regexp">/.ssh/i</span>d_ed25519<br>    chmod <span class="hljs-number">600</span> ~<span class="hljs-regexp">/.ssh/i</span>d_ed25519<br>    ssh-keyscan github.com &gt;&gt; ~<span class="hljs-regexp">/.ssh/</span>known_hosts<br>    git config --global user.name <span class="hljs-variable">$GIT_USER</span><br>    git config --global user.email <span class="hljs-variable">$GIT_EMAIL</span><br></code></pre></td></tr></table></figure><p>在<code>~/.ssh</code>下的两个文件：</p><ul><li>id_ed25519:私钥，同配置在 repo blog 的 secrets</li><li>known_hosts</li></ul><ol start="5"><li>安装依赖并发布</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">dependencies</span><br>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>    <span class="hljs-string">yarn</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span><br>  <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>    <span class="hljs-string">yarn</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode(201-∞)</title>
    <link href="/2020/07/28/leetcode-200/"/>
    <url>/2020/07/28/leetcode-200/</url>
    
    <content type="html"><![CDATA[<p>记录 LeetCode 200 题后的代码，语言：js</p><a id="more"></a><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202.快乐数"></a>202.快乐数</h2><p>非快乐数会形成环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isHappy = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> exist = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nextN</span>(<span class="hljs-params">num</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> cur <span class="hljs-keyword">of</span> <span class="hljs-built_in">String</span>(num)) &#123;<br>      sum += <span class="hljs-built_in">Number</span>(cur) * <span class="hljs-built_in">Number</span>(cur);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sum === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (exist.get(sum)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    exist.set(sum, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> nextN(sum);<br>  &#125;<br>  <span class="hljs-keyword">return</span> nextN(n);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="213-打家劫舍-II"><a href="#213-打家劫舍-II" class="headerlink" title="213.打家劫舍 II"></a>213.打家劫舍 II</h2><p>拆分成两个单排，不算第一个房间&amp;不算最后一个房间，方法 <code>rob1</code> 为题目 198 的解法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rob1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">let</span> dp = [nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]];<br>  <span class="hljs-keyword">let</span> max = <span class="hljs-built_in">Math</span>.max(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> curTotal = dp[<span class="hljs-number">0</span>] + nums[i];<br>    max = <span class="hljs-built_in">Math</span>.max(curTotal, dp[<span class="hljs-number">1</span>]);<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-built_in">Math</span>.max(dp[<span class="hljs-number">1</span>], dp[<span class="hljs-number">0</span>]);<br>    dp[<span class="hljs-number">1</span>] = curTotal;<br>  &#125;<br>  <span class="hljs-keyword">return</span> max;<br>&#125;;<br><br><span class="hljs-keyword">var</span> rob = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(rob1(nums.slice(<span class="hljs-number">1</span>)), rob1(nums.slice(<span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>)));<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217.存在重复元素"></a>217.存在重复元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> containsDuplicate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> cur <span class="hljs-keyword">of</span> nums) &#123;<br>    <span class="hljs-keyword">if</span> (map.get(cur)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    map.set(cur, <span class="hljs-literal">true</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="219-存在重复元素-II"><a href="#219-存在重复元素-II" class="headerlink" title="219.存在重复元素 II"></a>219.存在重复元素 II</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> containsNearbyDuplicate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, k</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (nums.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> nums) &#123;<br>    <span class="hljs-keyword">const</span> cur = nums[i];<br>    <span class="hljs-keyword">const</span> index = map.get(cur);<br>    <span class="hljs-keyword">if</span> (index !== <span class="hljs-literal">undefined</span> &amp;&amp; <span class="hljs-built_in">Number</span>(i) - index &lt;= k) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    map.set(cur, <span class="hljs-built_in">Number</span>(i));<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="263-丑数"><a href="#263-丑数" class="headerlink" title="263.丑数"></a>263.丑数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isUgly = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (num === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">if</span> (num === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">while</span> (num !== <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (num % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) num /= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">3</span> === <span class="hljs-number">0</span>) num /= <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num % <span class="hljs-number">5</span> === <span class="hljs-number">0</span>) num /= <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="268-缺失数字"><a href="#268-缺失数字" class="headerlink" title="268.缺失数字"></a>268.缺失数字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> missingNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len + <span class="hljs-number">1</span>; i++) &#123;<br>    res ^= i ^ (nums[i] || <span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322.零钱兑换"></a>322.零钱兑换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> coinChange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">coins, amount</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(amount + <span class="hljs-number">1</span>).fill(amount + <span class="hljs-number">1</span>);<br>  dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; dp.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> coin <span class="hljs-keyword">of</span> coins) &#123;<br>      <span class="hljs-keyword">if</span> (i - coin &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>      dp[i] = <span class="hljs-built_in">Math</span>.min(dp[i], dp[i - coin] + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> dp[amount] === amount + <span class="hljs-number">1</span> ? -<span class="hljs-number">1</span> : dp[amount];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="374-猜数字大小"><a href="#374-猜数字大小" class="headerlink" title="374.猜数字大小"></a>374.猜数字大小</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> guessNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> right = n;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">const</span> mid = getMid(left, right);<br>    <span class="hljs-keyword">const</span> res = guess(mid);<br>    <span class="hljs-keyword">if</span> (res === <span class="hljs-number">1</span>) &#123;<br>      left = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res === -<span class="hljs-number">1</span>) &#123;<br>      right = mid - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> mid;<br>  &#125;<br>  <span class="hljs-keyword">return</span> left;<br>&#125;;<br><br><span class="hljs-keyword">var</span> getMid = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">left, right</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = left + right;<br>  <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> len / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">return</span> (len - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="389-找不同"><a href="#389-找不同" class="headerlink" title="389.找不同"></a>389.找不同</h2><p>异或位运算，字母要转换为 code 码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> findTheDifference = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s, t</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> cur <span class="hljs-keyword">of</span> s) &#123;<br>    res ^= cur.charCodeAt();<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> cur <span class="hljs-keyword">of</span> t) &#123;<br>    res ^= cur.charCodeAt();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>.fromCharCode(res);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="397-整数替换"><a href="#397-整数替换" class="headerlink" title="397.整数替换"></a>397.整数替换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> integerReplacement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> integerReplacement(n / <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.min(<br>      integerReplacement(n - <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>,<br>      integerReplacement(n + <span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>    );<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="400-第-N-个数字"><a href="#400-第-N-个数字" class="headerlink" title="400.第 N 个数字"></a>400.第 N 个数字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> findNthDigit = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> z = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> preLen = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (i; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> curLen = <span class="hljs-number">9</span> * z * i;<br>    <span class="hljs-keyword">const</span> total = preLen + curLen;<br>    <span class="hljs-keyword">if</span> (n &lt;= total) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      preLen = total;<br>    &#125;<br>    z *= <span class="hljs-number">10</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> rest = n - preLen;<br>  <span class="hljs-keyword">const</span> t = <span class="hljs-built_in">Math</span>.ceil(rest / i) - <span class="hljs-number">1</span> + z;<br>  <span class="hljs-keyword">let</span> index;<br>  <span class="hljs-keyword">if</span> (rest % i === <span class="hljs-number">0</span>) &#123;<br>    index = i - <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    index = (rest % i) - <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> res = <span class="hljs-built_in">Number</span>(<span class="hljs-built_in">String</span>(t)[index]);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454.四数相加 II"></a>454.四数相加 II</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fourSumCount = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">A, B, C, D</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> length = A.length;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> map = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    <span class="hljs-keyword">const</span> a = A[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<br>      <span class="hljs-keyword">const</span> b = B[j];<br>      <span class="hljs-keyword">const</span> sum = a + b;<br>      <span class="hljs-keyword">if</span> (map[sum]) &#123;<br>        map[sum].push([i, j]);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        map[sum] = [[i, j]];<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    <span class="hljs-keyword">const</span> c = C[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<br>      <span class="hljs-keyword">const</span> d = D[j];<br>      <span class="hljs-keyword">const</span> sum = c + d;<br>      <span class="hljs-keyword">if</span> (map[-sum]) &#123;<br>        res += map[-sum].length;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="495-提莫攻击"><a href="#495-提莫攻击" class="headerlink" title="495.提莫攻击"></a>495.提莫攻击</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> findPoisonedDuration = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">timeSeries, duration</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (timeSeries.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; timeSeries.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = timeSeries[i];<br>    <span class="hljs-keyword">const</span> pre = timeSeries[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (cur - pre &gt;= duration) &#123;<br>      res += duration;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res += cur - pre;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res + duration;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="516-最长回文子序列"><a href="#516-最长回文子序列" class="headerlink" title="516.最长回文子序列"></a>516.最长回文子序列</h2><p>写法 1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> longestPalindromeSubseq = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = s.length;<br>  <span class="hljs-keyword">if</span> (!s || len === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> dp = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    dp[i] = [];<br>    dp[i][i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>      <span class="hljs-keyword">if</span> (s[i] === s[j]) &#123;<br>        <span class="hljs-keyword">if</span> (j - i === <span class="hljs-number">1</span>) dp[i][j] = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">else</span> dp[i][j] = dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">2</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        dp[i][j] = <span class="hljs-built_in">Math</span>.max(dp[i][j - <span class="hljs-number">1</span>], dp[i + <span class="hljs-number">1</span>][j]);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][len - <span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>写法 2:降维：(?)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> longestPalindromeSubseq = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> length = s.length;<br><br>  <span class="hljs-keyword">let</span> dp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(length).fill(<span class="hljs-number">1</span>);<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">let</span> prev = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; length; j++) &#123;<br>      <span class="hljs-keyword">let</span> tmp = dp[j];<br>      <span class="hljs-keyword">if</span> (s[i] === s[j]) &#123;<br>        dp[j] = prev + <span class="hljs-number">2</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        dp[j] = <span class="hljs-built_in">Math</span>.max(dp[j], dp[j - <span class="hljs-number">1</span>]);<br>      &#125;<br>      prev = tmp;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> dp[length - <span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="605-种花问题"><a href="#605-种花问题" class="headerlink" title="605.种花问题"></a>605.种花问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canPlaceFlowers = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">flowerbed, n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> last = -<span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; flowerbed.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (flowerbed[i] === <span class="hljs-number">1</span>) &#123;<br>      last = i;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (i &gt; last + <span class="hljs-number">1</span> &amp;&amp; flowerbed[i + <span class="hljs-number">1</span>] !== <span class="hljs-number">1</span>) &#123;<br>        count++;<br>        last = i;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="647-回文子串"><a href="#647-回文子串" class="headerlink" title="647.回文子串"></a>647.回文子串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> countSubstrings = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = s.length;<br>  <span class="hljs-keyword">if</span> (!s || len === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> dp = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    dp[i] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i; j &lt; len; j++) &#123;<br>      <span class="hljs-keyword">if</span> (j === i) dp[i][j] = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j - i === <span class="hljs-number">1</span> &amp;&amp; s[i] === s[j]) dp[i][j] = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] &amp;&amp; s[i] === s[j]) dp[i][j] = <span class="hljs-literal">true</span>;<br><br>      <span class="hljs-keyword">if</span> (dp[i][j]) &#123;<br>        res++;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="657-机器人能否返回原点"><a href="#657-机器人能否返回原点" class="headerlink" title="657.机器人能否返回原点"></a>657.机器人能否返回原点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> judgeCircle = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">moves</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> row = <span class="hljs-number">0</span>,<br>    col = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> cur <span class="hljs-keyword">of</span> moves) &#123;<br>    <span class="hljs-keyword">switch</span> (cur) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;R&quot;</span>:<br>        row++;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;L&quot;</span>:<br>        row--;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;U&quot;</span>:<br>        col++;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;D&quot;</span>:<br>        col--;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (row === <span class="hljs-number">0</span> &amp;&amp; col === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="680-验证回文字符串-Ⅱ"><a href="#680-验证回文字符串-Ⅱ" class="headerlink" title="680.验证回文字符串 Ⅱ"></a>680.验证回文字符串 Ⅱ</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> validPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> right = s.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">const</span> a = s[left];<br>    <span class="hljs-keyword">const</span> b = s[right];<br>    <span class="hljs-keyword">if</span> (a !== b) &#123;<br>      <span class="hljs-keyword">if</span> (<br>        !isPalindrome(left + <span class="hljs-number">1</span>, right, s) &amp;&amp;<br>        !isPalindrome(left, right - <span class="hljs-number">1</span>, s)<br>      )<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    left++;<br>    right--;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br><br><span class="hljs-keyword">var</span> isPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">left, right, str</span>) </span>&#123;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">const</span> a = str[left];<br>    <span class="hljs-keyword">const</span> b = str[right];<br>    <span class="hljs-keyword">if</span> (a !== b) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    left++;<br>    right--;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="697-数组的度"><a href="#697-数组的度" class="headerlink" title="697.数组的度"></a>697.数组的度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> findShortestSubArray = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> maxCount = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> maxLen = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = nums[i];<br>    <span class="hljs-keyword">const</span> val = map.get(cur);<br>    <span class="hljs-keyword">let</span> count, len;<br>    <span class="hljs-keyword">if</span> (val) &#123;<br>      count = val[<span class="hljs-number">2</span>] + <span class="hljs-number">1</span>;<br>      len = i - val[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<br>      map.set(cur, [val[<span class="hljs-number">0</span>], i, count]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      count = <span class="hljs-number">1</span>;<br>      len = <span class="hljs-number">1</span>;<br>      map.set(cur, [i, i, count]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count &gt; maxCount) &#123;<br>      maxLen = len;<br>      maxCount = count;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (count === maxCount) &#123;<br>      maxLen = <span class="hljs-built_in">Math</span>.min(maxLen, len);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> maxLen;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784.字母大小写全排列"></a>784.字母大小写全排列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> letterCasePermutation = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">S</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">track, pivot</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (track.length === S.length) &#123;<br>      res.push(track);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> cur = S[pivot];<br>    <span class="hljs-keyword">if</span> ((cur &gt;= <span class="hljs-string">&quot;a&quot;</span> &amp;&amp; cur &lt;= <span class="hljs-string">&quot;z&quot;</span>) || (cur &gt;= <span class="hljs-string">&quot;A&quot;</span> &amp;&amp; cur &lt;= <span class="hljs-string">&quot;Z&quot;</span>)) &#123;<br>      <span class="hljs-keyword">const</span> low = cur.toLowerCase();<br>      <span class="hljs-keyword">const</span> up = cur.toUpperCase();<br>      recursion(track + low, pivot + <span class="hljs-number">1</span>);<br>      recursion(track + up, pivot + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      recursion(track + cur, pivot + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  recursion(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="852-山脉数组的峰顶索引"><a href="#852-山脉数组的峰顶索引" class="headerlink" title="852.山脉数组的峰顶索引"></a>852.山脉数组的峰顶索引</h2><p>二分法，见[题 162.寻找峰值]</p><h2 id="973-最接近原点的-K-个点"><a href="#973-最接近原点的-K-个点" class="headerlink" title="973.最接近原点的 K 个点"></a>973.最接近原点的 K 个点</h2><p>本质是排序 points，取前 K 个，使用递归快排</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> kClosest = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">points, K</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> lenArr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> points) &#123;<br>    <span class="hljs-keyword">const</span> cur = points[i];<br>    <span class="hljs-keyword">const</span> len = cur[<span class="hljs-number">0</span>] * cur[<span class="hljs-number">0</span>] + cur[<span class="hljs-number">1</span>] * cur[<span class="hljs-number">1</span>];<br>    lenArr.push(&#123; len, <span class="hljs-attr">i</span>: <span class="hljs-built_in">Number</span>(i) &#125;);<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> newLenArr = recursion(lenArr);<br><br>  <span class="hljs-keyword">let</span> n = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-keyword">while</span> (n &lt; K) &#123;<br>    <span class="hljs-keyword">const</span> cur = points[newLenArr[n].i];<br>    res.push(cur);<br>    n++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><br><span class="hljs-keyword">var</span> recursion = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">arr</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (arr.length &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> arr;<br>  <span class="hljs-keyword">const</span> base = arr[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> left = [];<br>  <span class="hljs-keyword">let</span> right = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = arr[i];<br>    <span class="hljs-keyword">if</span> (cur.len &lt; base.len) &#123;<br>      left.push(cur);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      right.push(cur);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> recursion(left).concat([base]).concat(recursion(right));<br>&#125;;<br></code></pre></td></tr></table></figure><p>优化方法 1，当数量满足 K 时，不继续排序后半部分数组</p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode(1-200)</title>
    <link href="/2020/07/11/leetcode/"/>
    <url>/2020/07/11/leetcode/</url>
    
    <content type="html"><![CDATA[<p>记录 LeetCode 1-200 题的代码，语言：js</p><a id="more"></a><h2 id="1-两数之合"><a href="#1-两数之合" class="headerlink" title="1.两数之合"></a>1.两数之合</h2><p>遍历 nums，将 <code>nums[i],i</code> 作为键值对存入散列表 map 中；<br>同时比较差值 difference 是否存在于 map 中</p><p>时间复杂度 O(n),空间复杂度 O(n)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> map = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> key = nums[i];<br>    <span class="hljs-keyword">const</span> difference = target - key;<br>    <span class="hljs-keyword">if</span> (map[difference] !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-keyword">return</span> [map[difference], i];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      map[key] = i;<br>    &#125;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> addTwoNumbers = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">l1, l2</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> up = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> temp = <span class="hljs-keyword">new</span> ListNode();<br>  <span class="hljs-keyword">let</span> l3 = temp;<br>  <span class="hljs-keyword">while</span> (l1 || l2) &#123;<br>    <span class="hljs-keyword">let</span> val = (l1 ? l1.val : <span class="hljs-number">0</span>) + (l2 ? l2.val : <span class="hljs-number">0</span>) + up;<br>    <span class="hljs-keyword">if</span> (val &gt;= <span class="hljs-number">10</span>) &#123;<br>      l3.next = <span class="hljs-keyword">new</span> ListNode(val % <span class="hljs-number">10</span>);<br>      up = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      l3.next = <span class="hljs-keyword">new</span> ListNode(val);<br>      up = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l1) l1 = l1.next;<br>    <span class="hljs-keyword">if</span> (l2) l2 = l2.next;<br>    l3 = l3.next;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (up === <span class="hljs-number">1</span>) &#123;<br>    l3.next = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> temp.next;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h2><p>遍历 s,出现重复字符则从上一个重复字符的地方重新计算长度<br>时间复杂度 O(n),空间复杂度 O(1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lengthOfLongestSubstring = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> min = <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">track, pivot</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (pivot === s.length) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">const</span> cur = s[pivot];<br>    <span class="hljs-keyword">const</span> exist = track.indexOf(cur);<br>    <span class="hljs-keyword">if</span> (exist === -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (min &lt; track.length + <span class="hljs-number">1</span>) &#123;<br>        min = track.length + <span class="hljs-number">1</span>;<br>      &#125;<br>      recursion(track + cur, pivot + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      recursion(track.substring(exist + <span class="hljs-number">1</span>) + cur, pivot + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  recursion(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> min;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5.最长回文子串"></a>5.最长回文子串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> longestPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = s.length;<br>  <span class="hljs-keyword">if</span> (!s || len === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> dp = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    dp[i] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i; j &lt; len; j++) &#123;<br>      <span class="hljs-keyword">if</span> (j === i) dp[i][j] = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j - i === <span class="hljs-number">1</span> &amp;&amp; s[i] === s[j]) dp[i][j] = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] &amp;&amp; s[i] === s[j]) dp[i][j] = <span class="hljs-literal">true</span>;<br><br>      <span class="hljs-keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="hljs-number">1</span> &gt; res.length) &#123;<br>        res = s.slice(i, j + <span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="6-Z-字形变换"><a href="#6-Z-字形变换" class="headerlink" title="6.Z 字形变换"></a>6.Z 字形变换</h2><p>res 是一个 numRows 个元素的数组，用来存放每一行的 string;<br>遍历 s，将每一个字符放到对应的 <code>res[pointer]</code> 里;<br><code>flag</code> 用来表示正向还是逆向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> convert = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s, numRows</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (numRows === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> s;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(numRows).fill(<span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">let</span> pointer = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i % (numRows - <span class="hljs-number">1</span>) === <span class="hljs-number">0</span> &amp;&amp; i !== <span class="hljs-number">0</span>) &#123;<br>      flag = !flag;<br>    &#125;<br>    res[pointer] += s[i];<br>    <span class="hljs-keyword">if</span> (flag) &#123;<br>      pointer++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      pointer--;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> res) &#123;<br>    sum += res[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="7-整数反转"><a href="#7-整数反转" class="headerlink" title="7.整数反转"></a>7.整数反转</h2><p>js 中数字用 64 位浮点数存储，进行位运算时，会将数字转化为 32 位整数。<br>一些位运算： <code>x | 0</code> 可以对 x 取整（舍弃小数点）;<code>n &amp; (n - 1)===0</code> n 为 2 的整数幂 ;<code>偶数 &amp; 1 = 0;奇数 &amp; 1 = 1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reverseBits = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>    res = (res &lt;&lt; <span class="hljs-number">1</span>) + (n &amp; <span class="hljs-number">1</span>);<br>    n &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res &gt;&gt;&gt; <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="8-字符串转换整数-atoi"><a href="#8-字符串转换整数-atoi" class="headerlink" title="8.字符串转换整数 (atoi)"></a>8.字符串转换整数 (atoi)</h2><p>注意特殊情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myAtoi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  &lt;!-- 判断正负 --&gt;<br>  <span class="hljs-keyword">let</span> positive = <span class="hljs-literal">true</span>;<br>  &lt;!-- 判断是否开始，过滤掉“+-<span class="hljs-number">2</span>”这种特殊的字符串 --&gt;<br>  <span class="hljs-keyword">let</span> init = <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; str.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = str[i];<br>    <span class="hljs-keyword">if</span> (cur === <span class="hljs-string">&quot; &quot;</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!init) <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur === <span class="hljs-string">&quot;-&quot;</span> &amp;&amp; !init) &#123;<br>      positive = <span class="hljs-literal">false</span>;<br>      init = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur === <span class="hljs-string">&quot;+&quot;</span> &amp;&amp; !init) &#123;<br>      positive = <span class="hljs-literal">true</span>;<br>      init = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isNaN</span>(cur)) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">const</span> n = str.charCodeAt(i) - <span class="hljs-number">48</span>;<br>      res = res * <span class="hljs-number">10</span> + n;<br>      init = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!positive) res = -res;<br>  <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">31</span>) - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">31</span>) - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res &lt; <span class="hljs-built_in">Math</span>.pow(-<span class="hljs-number">2</span>, <span class="hljs-number">31</span>)) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.pow(-<span class="hljs-number">2</span>, <span class="hljs-number">31</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9.回文数"></a>9.回文数</h2><ol><li>转化为 string</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (x === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">const</span> string = x.toString();<br>  <span class="hljs-keyword">const</span> length = string.length;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length / <span class="hljs-number">2</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (string[i] !== string[length - <span class="hljs-number">1</span> - i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>通过算数逆转 x 得到 res，判断 res 与 x 是否相同</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> y = x;<br>  <span class="hljs-keyword">while</span> (y !== <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">const</span> last = y % <span class="hljs-number">10</span>;<br>    res = res * <span class="hljs-number">10</span> + last;<br>    y = (y / <span class="hljs-number">10</span>) | <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res === x;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>通过算数取到首尾数并比较：尾数 <code>x % 10</code> ,首数<code>(x / n) | 0</code> 。<br>n 为 x 的数量级,<code>n = Math.pow(10,Math.log10(x) | 0)</code> 。<br><code>| 0</code> 是取整的操作,可以用 <code>Math.floor</code>替代</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">const</span> f = <span class="hljs-built_in">Math</span>.log10(x) | <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> n = <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, f);<br>  <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">const</span> first = (x / n) | <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> last = x % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (first !== last) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    x = ((x % n) / <span class="hljs-number">10</span>) | <span class="hljs-number">0</span>;<br>    n /= <span class="hljs-number">100</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11.盛最多水的容器"></a>11.盛最多水的容器</h2><ol><li> 暴力解</li><li>双指针，移动高度较小的边<br> 时间复杂度 O(n),空间复杂度 O(1)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxArea = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">height</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = height.length;<br>  <span class="hljs-keyword">let</span> maxArea = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> right = len - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">var</span> getMaxArea = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">area</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (area &gt; maxArea) &#123;<br>      maxArea = area;<br>    &#125;<br>  &#125;;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">const</span> a = height[left];<br>    <span class="hljs-keyword">const</span> b = height[right];<br>    <span class="hljs-keyword">const</span> width = right - left;<br>    <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>      getMaxArea(b * width);<br>      right--;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a &lt; b) &#123;<br>      getMaxArea(a * width);<br>      left++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      getMaxArea(a * width);<br>      left++;<br>      right--;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> maxArea;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="12-整数转罗马数字"><a href="#12-整数转罗马数字" class="headerlink" title="12.整数转罗马数字"></a>12.整数转罗马数字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> intToRoman = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">num</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">const</span> roman = &#123;<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&quot;I&quot;</span>,<br>    <span class="hljs-number">5</span>: <span class="hljs-string">&quot;V&quot;</span>,<br>    <span class="hljs-number">10</span>: <span class="hljs-string">&quot;X&quot;</span>,<br>    <span class="hljs-number">50</span>: <span class="hljs-string">&quot;L&quot;</span>,<br>    <span class="hljs-number">100</span>: <span class="hljs-string">&quot;C&quot;</span>,<br>    <span class="hljs-number">500</span>: <span class="hljs-string">&quot;D&quot;</span>,<br>    <span class="hljs-number">1000</span>: <span class="hljs-string">&quot;M&quot;</span>,<br>  &#125;;<br>  <span class="hljs-keyword">const</span> f = <span class="hljs-built_in">Math</span>.log10(num) | <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> n = <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">10</span>, f);<br>  <span class="hljs-keyword">while</span> (n !== <span class="hljs-number">0.1</span>) &#123;<br>    <span class="hljs-keyword">let</span> first = (num / n) | <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (first &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (first === <span class="hljs-number">9</span>) &#123;<br>        res += roman[n] + roman[n * <span class="hljs-number">10</span>];<br>        first -= <span class="hljs-number">9</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (first &gt;= <span class="hljs-number">5</span>) &#123;<br>        res += roman[n * <span class="hljs-number">5</span>];<br>        first -= <span class="hljs-number">5</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (first === <span class="hljs-number">4</span>) &#123;<br>        res += roman[n] + roman[n * <span class="hljs-number">5</span>];<br>        first -= <span class="hljs-number">4</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res += roman[n];<br>        first--;<br>      &#125;<br>    &#125;<br>    num %= n;<br>    n /= <span class="hljs-number">10</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title="13.罗马数字转整数"></a>13.罗马数字转整数</h2><p>遍历 string，右（当前）大于左（前一个）时，减去前一个数字的 2 倍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> romanToInt = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> roman = &#123;<br>    I: <span class="hljs-number">1</span>,<br>    V: <span class="hljs-number">5</span>,<br>    X: <span class="hljs-number">10</span>,<br>    L: <span class="hljs-number">50</span>,<br>    C: <span class="hljs-number">100</span>,<br>    D: <span class="hljs-number">500</span>,<br>    M: <span class="hljs-number">1000</span>,<br>  &#125;;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = roman[s[i]];<br>    <span class="hljs-keyword">const</span> pre = i &lt; <span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : roman[s[i - <span class="hljs-number">1</span>]];<br>    sum += pre &lt; cur ? cur - pre * <span class="hljs-number">2</span> : cur;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> sum;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14.最长公共前缀"></a>14.最长公共前缀</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> longestCommonPrefix = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">strs</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (strs.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">if</span> (strs.length === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> pivot = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (pivot &lt; strs[<span class="hljs-number">0</span>].length) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; strs.length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (!strs[i][pivot]) <span class="hljs-keyword">return</span> res;<br>      <span class="hljs-keyword">if</span> (strs[i][pivot] !== strs[i - <span class="hljs-number">1</span>][pivot]) <span class="hljs-keyword">return</span> res;<br>      <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (i === strs.length - <span class="hljs-number">1</span>) &#123;<br>          res += strs[<span class="hljs-number">0</span>][pivot];<br>        &#125;<br>      &#125;<br>    &#125;<br>    pivot++;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15.三数之和"></a>15.三数之和</h2><p>先快排对 nums 升序排列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> threeSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> length = nums.length;<br>  <span class="hljs-keyword">const</span> newNums = sortNumber(nums);<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-comment">// 记录前一个a，相同则跳过本次a的循环</span><br>  <span class="hljs-keyword">let</span> preA;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    <span class="hljs-keyword">const</span> a = newNums[i];<br>    <span class="hljs-keyword">if</span> (preA === a) <span class="hljs-keyword">continue</span>;<br>    preA = a;<br>    <span class="hljs-comment">// preSecond记录第二次循环的起始值，在同一个a里，相同则跳过本次second循环</span><br>    <span class="hljs-keyword">let</span> left = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> right = length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> preSecond;<br><br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>      <span class="hljs-keyword">const</span> baseLeft = newNums[left];<br><br>      <span class="hljs-keyword">if</span> (baseLeft === preSecond) &#123;<br>        left++;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">const</span> b = baseLeft;<br>      <span class="hljs-keyword">const</span> c = newNums[right];<br>      <span class="hljs-keyword">const</span> sum = b + c;<br>      <span class="hljs-keyword">if</span> (sum === -a) &#123;<br>        res.push([a, b, c]);<br>        preSecond = baseLeft;<br>        left++;<br>        right--;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; -a) &#123;<br>        right--;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        preSecond = baseLeft;<br>        left++;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><span class="hljs-keyword">var</span> sortNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (nums.length &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums;<br>  <span class="hljs-keyword">const</span> pivot = nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> left = [];<br>  <span class="hljs-keyword">let</span> right = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = nums[i];<br>    <span class="hljs-keyword">if</span> (cur &lt; pivot) &#123;<br>      left.push(cur);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      right.push(cur);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sortNumber(left).concat([pivot], sortNumber(right));<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16.最接近的三数之和"></a>16.最接近的三数之和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> threeSumClosest = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> length = nums.length;<br>  <span class="hljs-keyword">const</span> newNums = sortNumber(nums);<br>  <span class="hljs-keyword">let</span> minGap = <span class="hljs-built_in">Number</span>.MAX_VALUE;<br>  <span class="hljs-keyword">let</span> allSum;<br>  <span class="hljs-comment">// 记录前一个a，相同则跳过本次a的循环</span><br>  <span class="hljs-keyword">let</span> preA;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>    <span class="hljs-keyword">const</span> a = newNums[i];<br>    <span class="hljs-keyword">if</span> (preA === a) <span class="hljs-keyword">continue</span>;<br>    preA = a;<br>    <span class="hljs-comment">// preSecond记录第二次循环的起始值，在同一个a里，相同则跳过本次second循环</span><br>    <span class="hljs-keyword">let</span> left = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> right = length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> preSecond;<br><br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>      <span class="hljs-keyword">const</span> baseLeft = newNums[left];<br><br>      <span class="hljs-keyword">if</span> (baseLeft === preSecond) &#123;<br>        left++;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">const</span> b = baseLeft;<br>      <span class="hljs-keyword">const</span> c = newNums[right];<br>      <span class="hljs-keyword">const</span> sum = a + b + c;<br>      <span class="hljs-keyword">debugger</span>;<br>      <span class="hljs-keyword">if</span> (sum === target) &#123;<br>        <span class="hljs-keyword">return</span> sum;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; target) &#123;<br>        <span class="hljs-keyword">const</span> gap = sum - target;<br>        <span class="hljs-keyword">if</span> (gap &lt; minGap) &#123;<br>          minGap = gap;<br>          allSum = sum;<br>        &#125;<br>        right--;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">const</span> gap = target - sum;<br>        <span class="hljs-keyword">if</span> (gap &lt; minGap) &#123;<br>          minGap = gap;<br>          allSum = sum;<br>        &#125;<br>        preSecond = baseLeft;<br>        left++;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> allSum;<br>&#125;;<br><span class="hljs-keyword">var</span> sortNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (nums.length &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums;<br>  <span class="hljs-keyword">const</span> pivot = nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> left = [];<br>  <span class="hljs-keyword">let</span> right = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = nums[i];<br>    <span class="hljs-keyword">if</span> (cur &lt; pivot) &#123;<br>      left.push(cur);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      right.push(cur);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sortNumber(left).concat([pivot], sortNumber(right));<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> letterCombinations = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">digits</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!digits) <span class="hljs-keyword">return</span> [];<br>  <span class="hljs-keyword">const</span> map = &#123;<br>    <span class="hljs-number">2</span>: <span class="hljs-string">&quot;abc&quot;</span>,<br>    <span class="hljs-number">3</span>: <span class="hljs-string">&quot;def&quot;</span>,<br>    <span class="hljs-number">4</span>: <span class="hljs-string">&quot;ghi&quot;</span>,<br>    <span class="hljs-number">5</span>: <span class="hljs-string">&quot;jkl&quot;</span>,<br>    <span class="hljs-number">6</span>: <span class="hljs-string">&quot;mno&quot;</span>,<br>    <span class="hljs-number">7</span>: <span class="hljs-string">&quot;pqrs&quot;</span>,<br>    <span class="hljs-number">8</span>: <span class="hljs-string">&quot;tuv&quot;</span>,<br>    <span class="hljs-number">9</span>: <span class="hljs-string">&quot;wxzy&quot;</span>,<br>  &#125;;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backTrack</span>(<span class="hljs-params">digits, track</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (digits.length === <span class="hljs-number">0</span>) &#123;<br>      res.push(track);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> d = map[digits[<span class="hljs-number">0</span>]];<br>    <span class="hljs-keyword">const</span> restDigits = digits.substring(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> d) &#123;<br>      <span class="hljs-keyword">const</span> cur = d[i];<br>      backTrack(restDigits, track + cur);<br>    &#125;<br>  &#125;<br>  backTrack(digits, <span class="hljs-string">&quot;&quot;</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18.四数之和"></a>18.四数之和</h2><p>在题 15.三数之和的外层加一个 d</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fourSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, target</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> length = nums.length;<br>  <span class="hljs-keyword">const</span> newNums = sortNumber(nums);<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-keyword">let</span> preD;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; length; j++) &#123;<br>    <span class="hljs-keyword">const</span> d = newNums[j];<br>    <span class="hljs-keyword">if</span> (preD === d) <span class="hljs-keyword">continue</span>;<br>    preD = d;<br>    <span class="hljs-keyword">let</span> preA;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = j + <span class="hljs-number">1</span>; i &lt; length; i++) &#123;<br>      <span class="hljs-keyword">const</span> a = newNums[i];<br>      <span class="hljs-keyword">if</span> (preA === a) <span class="hljs-keyword">continue</span>;<br>      preA = a;<br>      <span class="hljs-keyword">let</span> left = i + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">let</span> right = length - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">let</span> preSecond;<br><br>      <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-keyword">const</span> baseLeft = newNums[left];<br><br>        <span class="hljs-keyword">if</span> (baseLeft === preSecond) &#123;<br>          left++;<br>          <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> b = baseLeft;<br>        <span class="hljs-keyword">const</span> c = newNums[right];<br>        <span class="hljs-keyword">const</span> sum = a + b + c;<br>        <span class="hljs-keyword">if</span> (sum === target - d) &#123;<br>          res.push([d, a, b, c]);<br>          preSecond = baseLeft;<br>          left++;<br>          right--;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; target - d) &#123;<br>          right--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          preSecond = baseLeft;<br>          left++;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br><span class="hljs-keyword">var</span> sortNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (nums.length &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums;<br>  <span class="hljs-keyword">const</span> pivot = nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> left = [];<br>  <span class="hljs-keyword">let</span> right = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = nums[i];<br>    <span class="hljs-keyword">if</span> (cur &lt; pivot) &#123;<br>      left.push(cur);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      right.push(cur);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sortNumber(left).concat([pivot], sortNumber(right));<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a>20. 有效的括号</h2><p>用栈：遍历 s，是左括号入栈，是右括号看是否匹配出栈的元素。<br>使用 Map 做左右括号的对应关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isValid = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (s.length % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>  map.set(<span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>);<br>  map.set(<span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>  map.set(<span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>);<br>  <span class="hljs-keyword">const</span> arr = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = s[i];<br>    <span class="hljs-keyword">if</span> (cur === <span class="hljs-string">&quot;(&quot;</span> || cur === <span class="hljs-string">&quot;&#123;&quot;</span> || cur === <span class="hljs-string">&quot;[&quot;</span>) &#123;<br>      arr.push(cur);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (arr.pop() !== map.get(cur)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> arr.length === <span class="hljs-number">0</span> ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mergeTwoLists = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">l1, l2</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!l1) <span class="hljs-keyword">return</span> l2;<br>  <span class="hljs-keyword">if</span> (!l2) <span class="hljs-keyword">return</span> l1;<br>  <span class="hljs-keyword">if</span> (l1.val &lt; l2.val) &#123;<br>    l1.next = mergeTwoLists(l1.next, l2);<br>    <span class="hljs-keyword">return</span> l1;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    l2.next = mergeTwoLists(l1, l2.next);<br>    <span class="hljs-keyword">return</span> l2;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26.删除排序数组中的重复项"></a>26.删除排序数组中的重复项</h2><p>双指针<br>时间复杂度 O(n),空间复杂度 O(1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (nums.length === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (nums[i] !== nums[i - <span class="hljs-number">1</span>]) &#123;<br>      j++;<br>      nums[j] = nums[i];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> j + <span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2><p>从后往前删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, val</span>) </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = nums.length - <span class="hljs-number">1</span>; i &gt; -<span class="hljs-number">1</span>; i--) &#123;<br>    <span class="hljs-keyword">if</span> (nums[i] === val) &#123;<br>      nums.splice(i, <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> nums.length;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28.实现 strStr()"></a>28.实现 strStr()</h2><p>在 haystack 中找 needle 的第一个字母对应的下标，存 firstLetter 中；<br>遍历 firstLetter，截取 haystack 对应的字符串和 needle 比较。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strStr = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">haystack, needle</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (needle === <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> firstLetter = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; haystack.length; j++) &#123;<br>    <span class="hljs-keyword">if</span> (haystack[j] === needle[<span class="hljs-number">0</span>]) &#123;<br>      firstLetter.push(j);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (firstLetter.length !== <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; firstLetter.length; i++) &#123;<br>      <span class="hljs-keyword">const</span> index = firstLetter[i];<br>      <span class="hljs-keyword">const</span> ori = haystack.substr(index, needle.length);<br>      <span class="hljs-keyword">if</span> (ori === needle) <span class="hljs-keyword">return</span> index;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="31-下一个排列"><a href="#31-下一个排列" class="headerlink" title="31.下一个排列"></a>31.下一个排列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> nextPermutation = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-comment">// 判断是否为完全升序数组，另做处理</span><br>  <span class="hljs-keyword">let</span> ascend = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = len - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">const</span> a = nums[i];<br>    <span class="hljs-comment">// b是a的相邻升序</span><br>    <span class="hljs-keyword">const</span> j = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">const</span> b = nums[i + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (a &lt; b) &#123;<br>      ascend = <span class="hljs-literal">false</span>;<br>      <span class="hljs-comment">// b后不存在数字，则直接交换,返回</span><br>      <span class="hljs-keyword">if</span> (j === len - <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> swapAAndB(nums, i, j);<br>      &#125;<br>      <span class="hljs-comment">// 否则寻找b后（包括b）大于a且最小的数字c</span><br>      <span class="hljs-keyword">let</span> cIndex = j;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> z = j + <span class="hljs-number">1</span>; z &lt; len; z++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[z] &gt; a &amp;&amp; nums[z] &lt;= b) &#123;<br>          cIndex = z;<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 此时 a&lt;c&lt;=b,交换a、c</span><br>      swapAAndB(nums, i, cIndex);<br>      <span class="hljs-comment">// 将b之后的数组升序排列，因为它一定是降序的，所以可以直接反转</span><br>      swapAToB(nums, j, len - <span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (ascend) &#123;<br>    <span class="hljs-keyword">return</span> swapAToB(nums, <span class="hljs-number">0</span>, len - <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> swapAToB = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, i, j</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = i;<br>  <span class="hljs-keyword">let</span> right = j;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    swapAAndB(nums, left, right);<br>    left++;<br>    right--;<br>  &#125;<br>  <span class="hljs-keyword">return</span> nums;<br>&#125;;<br><br><span class="hljs-keyword">var</span> swapAAndB = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, i, j</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> temp = nums[i];<br>  nums[i] = nums[j];<br>  nums[j] = temp;<br>  <span class="hljs-keyword">return</span> nums;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39.组合总和"></a>39.组合总和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> combinationSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">candidates, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  <span class="hljs-keyword">var</span> recursion = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">track, target, start</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (target &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (target === <span class="hljs-number">0</span>) &#123;<br>      result.push(track);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start; i &lt; candidates.length; i++) &#123;<br>      <span class="hljs-keyword">const</span> cur = candidates[i];<br>      recursion(track.concat([cur]), target - cur, i);<br>    &#125;<br>  &#125;;<br>  recursion([], target, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40.组合总和 II"></a>40.组合总和 II</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> combinationSum2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">candidates, target</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> result = [];<br>  candidates.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);<br>  <span class="hljs-keyword">var</span> recursion = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">track, target, start</span>) </span>&#123;<br>    <span class="hljs-keyword">debugger</span>;<br>    <span class="hljs-keyword">if</span> (target &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (target === <span class="hljs-number">0</span>) &#123;<br>      result.push(track);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start; i &lt; candidates.length; i++) &#123;<br>      <span class="hljs-keyword">const</span> cur = candidates[i];<br>      <span class="hljs-keyword">if</span> (cur === candidates[i - <span class="hljs-number">1</span>] &amp;&amp; i &gt; start) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br>      recursion(track.concat([cur]), target - cur, i + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;;<br>  recursion([], target, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="45-跳跃游戏-II"><a href="#45-跳跃游戏-II" class="headerlink" title="45.跳跃游戏 II"></a>45.跳跃游戏 II</h2><ol><li>递归</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jump = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">pivot</span>) </span>&#123;<br>    count++;<br>    <span class="hljs-keyword">const</span> step = nums[pivot];<br>    <span class="hljs-keyword">if</span> (step + pivot &gt;= len - <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">let</span> maxIndex = pivot;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = pivot + <span class="hljs-number">1</span>; i &lt;= pivot + step; i++) &#123;<br>      <span class="hljs-keyword">if</span> (nums[i] + i &gt; nums[maxIndex] + maxIndex) &#123;<br>        maxIndex = i;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (maxIndex === pivot) <span class="hljs-keyword">return</span>;<br>    recursion(maxIndex);<br>  &#125;<br>  recursion(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> count;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>循环</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> jump = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>,<br>    max = <span class="hljs-number">0</span>,<br>    end = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>    max = <span class="hljs-built_in">Math</span>.max(max, i + nums[i]);<br>    <span class="hljs-keyword">if</span> (i === end) &#123;<br>      end = max;<br>      count++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> count;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46.全排列"></a>46.全排列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> permute = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">track, used</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (track.length === nums.length) &#123;<br>      res.push(track);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>      <span class="hljs-keyword">const</span> cur = nums[i];<br>      <span class="hljs-keyword">if</span> (used.includes(i)) <span class="hljs-keyword">continue</span>;<br>      recursion(track.concat([cur]), used.concat([i]));<br>    &#125;<br>  &#125;<br>  recursion([], []);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47.全排列 II"></a>47.全排列 II</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> swap = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, i, j</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (i === j) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">const</span> temp = nums[i];<br>  nums[i] = nums[j];<br>  nums[j] = temp;<br>&#125;;<br><span class="hljs-keyword">var</span> permuteUnique = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  nums.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);<br>  <span class="hljs-keyword">const</span> length = nums.length;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">arr, pivot</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (arr.length === pivot) &#123;<br>      res.push(arr.slice());<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> map = &#123;&#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = pivot; i &lt; length; i++) &#123;<br>      <span class="hljs-keyword">const</span> cur = arr[i];<br>      <span class="hljs-keyword">if</span> (!map[cur]) &#123;<br>        map[cur] = <span class="hljs-literal">true</span>;<br>        swap(arr, pivot, i);<br>        recursion(arr, pivot + <span class="hljs-number">1</span>);<br>        swap(arr, pivot, i);<br>      &#125;<br>    &#125;<br>  &#125;<br>  recursion(nums, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53.最大子序和"></a>53.最大子序和</h2><p>动态规划</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxSubArray = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> pre = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> max = nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> cur <span class="hljs-keyword">of</span> nums) &#123;<br>    pre = <span class="hljs-built_in">Math</span>.max(pre + cur, cur);<br>    max = <span class="hljs-built_in">Math</span>.max(max, pre);<br>  &#125;<br>  <span class="hljs-keyword">return</span> max;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="55-跳跃游戏-II"><a href="#55-跳跃游戏-II" class="headerlink" title="55.跳跃游戏 II"></a>55.跳跃游戏 II</h2><ol><li>从下标 0 开始，每次取 step 里最大的值作为下一个下标<br>这个思路适用于题 45.跳跃游戏 II</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canJump = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-literal">false</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backTrack</span>(<span class="hljs-params">pivot</span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> step = nums[pivot];<br>    <span class="hljs-keyword">if</span> (step + pivot &gt;= len - <span class="hljs-number">1</span>) &#123;<br>      res = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">let</span> maxIndex = pivot;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = pivot + <span class="hljs-number">1</span>; i &lt;= pivot + step; i++) &#123;<br>      <span class="hljs-keyword">if</span> (nums[i] + i &gt; nums[maxIndex] + maxIndex) &#123;<br>        maxIndex = i;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (maxIndex === pivot) <span class="hljs-keyword">return</span>;<br>    backTrack(maxIndex);<br>  &#125;<br>  backTrack(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>遍历 nums,判断当前是否在步数 max 中，是则更新 max 的数据，否则返回 false</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canJump = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> max = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i &lt;= max) &#123;<br>      <span class="hljs-keyword">if</span> (nums[i] + i &gt; max) max = nums[i] + i;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56.合并区间"></a>56.合并区间</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> merge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">intervals</span>) </span>&#123;<br>  intervals.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a[<span class="hljs-number">1</span>] - b[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = intervals.length - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">const</span> cur = intervals[i];<br>    <span class="hljs-keyword">const</span> pre = intervals[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (pre[<span class="hljs-number">0</span>] &gt;= cur[<span class="hljs-number">0</span>]) &#123;<br>      intervals.splice(i - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pre[<span class="hljs-number">1</span>] &gt;= cur[<span class="hljs-number">0</span>]) &#123;<br>      intervals.splice(i - <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [pre[<span class="hljs-number">0</span>], cur[<span class="hljs-number">1</span>]]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> intervals;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="58-最后一个单词的长度"><a href="#58-最后一个单词的长度" class="headerlink" title="58.最后一个单词的长度"></a>58.最后一个单词的长度</h2><p>注意特殊情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lengthOfLastWord = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> start = -<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = s.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">if</span> (s[i] !== <span class="hljs-string">&quot; &quot;</span> &amp;&amp; start === -<span class="hljs-number">1</span>) &#123;<br>      start = i;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s[i] === <span class="hljs-string">&quot; &quot;</span> &amp;&amp; start !== -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> start - i;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> start === -<span class="hljs-number">1</span> ? <span class="hljs-number">0</span> : start + <span class="hljs-number">1</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="60-第-k-个排列"><a href="#60-第-k-个排列" class="headerlink" title="60.第 k 个排列"></a>60.第 k 个排列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getPermutation = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n, k</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> dp = [];<br>  <span class="hljs-keyword">let</span> choose = [<span class="hljs-number">1</span>];<br>  dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> m = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">while</span> (m &lt;= n) &#123;<br>    dp[m] = dp[m - <span class="hljs-number">1</span>] * m;<br>    choose.push(m);<br>    m++;<br>  &#125;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>  k--;<br>  <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">const</span> quotient = (k / dp[n - <span class="hljs-number">1</span>]) | <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">const</span> remainder = k % dp[n - <span class="hljs-number">1</span>];<br>      res += choose[quotient];<br>      choose.splice(quotient, <span class="hljs-number">1</span>);<br>      k = remainder;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n === <span class="hljs-number">2</span>) &#123;<br>      res += choose[k];<br>      choose.splice(k, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res += choose[<span class="hljs-number">0</span>];<br>    &#125;<br>    n--;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62.不同路径"></a>62.不同路径</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> uniquePaths = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">m, n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> dp = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    dp[i] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>      <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span> || j === <span class="hljs-number">0</span>) dp[i][j] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63.不同路径 II"></a>63.不同路径 II</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> uniquePathsWithObstacles = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obstacleGrid</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> m = obstacleGrid.length;<br>  <span class="hljs-keyword">const</span> n = obstacleGrid[<span class="hljs-number">0</span>].length;<br>  <span class="hljs-keyword">let</span> dp = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    dp[i] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>      <span class="hljs-keyword">if</span> (<br>        obstacleGrid[i][j] === <span class="hljs-number">1</span> ||<br>        (i === <span class="hljs-number">0</span> &amp;&amp; j &gt; <span class="hljs-number">0</span> &amp;&amp; dp[i][j - <span class="hljs-number">1</span>] === <span class="hljs-number">0</span>) ||<br>        (j === <span class="hljs-number">0</span> &amp;&amp; i &gt; <span class="hljs-number">0</span> &amp;&amp; dp[i - <span class="hljs-number">1</span>][j] === <span class="hljs-number">0</span>)<br>      )<br>        dp[i][j] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span> || j === <span class="hljs-number">0</span>) dp[i][j] = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64.最小路径和"></a>64.最小路径和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> minPathSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">grid</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> m = grid.length;<br>  <span class="hljs-keyword">const</span> n = grid[<span class="hljs-number">0</span>].length;<br>  <span class="hljs-keyword">let</span> dp = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    dp[i] = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>      <span class="hljs-keyword">const</span> cur = grid[i][j];<br>      <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span> &amp;&amp; j === <span class="hljs-number">0</span>) dp[i][j] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) dp[i][j] = cur + dp[i][j - <span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j === <span class="hljs-number">0</span>) dp[i][j] = cur + dp[i - <span class="hljs-number">1</span>][j];<br>      <span class="hljs-keyword">else</span> dp[i][j] = cur + <span class="hljs-built_in">Math</span>.min(dp[i][j - <span class="hljs-number">1</span>], dp[i - <span class="hljs-number">1</span>][j]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="66-加一"><a href="#66-加一" class="headerlink" title="66.加一"></a>66.加一</h2><p>倒序遍历，是 9 改为 0，否则加一并 return；最后处理进位的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> plusOne = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">digits</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> length = digits.length;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">const</span> cur = digits[i];<br>    <span class="hljs-keyword">if</span> (cur === <span class="hljs-number">9</span>) &#123;<br>      digits[i] = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      digits[i] = cur + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">return</span> digits;<br>    &#125;<br>  &#125;<br>  &lt;!-- 进位 --&gt;<br>  digits.splice(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> digits;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67.二进制求和"></a>67.二进制求和</h2><p>补 0，倒序进位加法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> addBinary = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-keyword">const</span> aLen = a.length;<br>  <span class="hljs-keyword">const</span> bLen = b.length;<br>  <span class="hljs-keyword">let</span> maxLength;<br>  <span class="hljs-comment">// 补0</span><br>  <span class="hljs-keyword">if</span> (aLen &gt; bLen) &#123;<br>    maxLength = aLen;<br>    b =<br>      <span class="hljs-built_in">Array</span>(maxLength - bLen)<br>        .fill(<span class="hljs-number">0</span>)<br>        .join(<span class="hljs-string">&quot;&quot;</span>) + b;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    maxLength = bLen;<br>    a =<br>      <span class="hljs-built_in">Array</span>(maxLength - aLen)<br>        .fill(<span class="hljs-number">0</span>)<br>        .join(<span class="hljs-string">&quot;&quot;</span>) + a;<br>  &#125;<br>  <span class="hljs-keyword">let</span> carry = <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = maxLength - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">const</span> x = <span class="hljs-built_in">Number</span>(a[i]) || <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> y = <span class="hljs-built_in">Number</span>(b[i]) || <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">const</span> cur = x + y + (carry ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (cur &gt;= <span class="hljs-number">2</span>) &#123;<br>      res.push(cur % <span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>      carry = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      res.push(cur);<br>      carry = <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (carry) res.push(<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> res.reverse().join(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h2><p>数学归纳法得出这是一个斐波纳契数列<br>时间复杂度 O(n)，空间复杂度 O(1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> climbStairs = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> pre = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> cur = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> pre;<br>  <span class="hljs-keyword">if</span> (n === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> cur;<br>  <span class="hljs-keyword">let</span> sum;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++) &#123;<br>    sum = pre + cur;<br>    pre = cur;<br>    cur = sum;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="75-颜色分类"><a href="#75-颜色分类" class="headerlink" title="75.颜色分类"></a>75.颜色分类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> sortColors = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> p2 = nums.length - <span class="hljs-number">1</span>,<br>    p0 = <span class="hljs-number">0</span>,<br>    cur = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">while</span> (cur &lt;= p2) &#123;<br>    <span class="hljs-keyword">if</span> (nums[cur] === <span class="hljs-number">0</span>) &#123;<br>      swap(nums, p0, cur);<br>      p0++;<br>      cur++;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[cur] === <span class="hljs-number">2</span>) &#123;<br>      swap(nums, p2, cur);<br>      p2--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      cur++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> nums;<br>&#125;;<br><span class="hljs-keyword">var</span> swap = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, i, j</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (i === j) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-keyword">const</span> temp = nums[i];<br>  nums[i] = nums[j];<br>  nums[j] = temp;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77.组合"></a>77.组合</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> combine = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n, k</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">track, start</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (track.length === k) &#123;<br>      res.push(track);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = start; i &lt;= n; i++) &#123;<br>      recursion(track.concat([i]), i + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  recursion([], <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78.子集"></a>78.子集</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> subsets = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-keyword">const</span> length = nums.length;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">track, pivot</span>) </span>&#123;<br>    res.push(track);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = pivot; i &lt; length; i++) &#123;<br>      <span class="hljs-keyword">const</span> cur = nums[i];<br>      recursion(track.concat([cur]), i + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  recursion([], <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="80-删除排序数组中的重复项-II"><a href="#80-删除排序数组中的重复项-II" class="headerlink" title="80.删除排序数组中的重复项 II"></a>80.删除排序数组中的重复项 II</h2><p>双指针<br>时间复杂度 O(n),空间复杂度 O(1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> removeDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> j = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (nums[i] === nums[i - <span class="hljs-number">1</span>]) &#123;<br>      count++;<br>    &#125; <span class="hljs-keyword">else</span> count = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">2</span>) &#123;<br>      nums[j] = nums[i];<br>      j++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> j;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83.删除排序链表中的重复元素"></a>83.删除排序链表中的重复元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> deleteDuplicates = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">head</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!head || !head.next) <span class="hljs-keyword">return</span> head;<br>  <span class="hljs-keyword">let</span> cur = head;<br>  <span class="hljs-keyword">let</span> second = cur.next;<br>  <span class="hljs-keyword">while</span> (second) &#123;<br>    <span class="hljs-keyword">if</span> (cur.val === second.val) &#123;<br>      second = second.next;<br>      cur.next = second;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      cur = second;<br>      second = second.next;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> head;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="90-子集-II"><a href="#90-子集-II" class="headerlink" title="90.子集 II"></a>90.子集 II</h2><p>在 题 78.子集的基础上加了两步：排序、跳过同层重复数的循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> subsetsWithDup = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  nums.sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b);<br>  <span class="hljs-keyword">const</span> length = nums.length;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">track, pivot</span>) </span>&#123;<br>    res.push(track);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = pivot; i &lt; length; i++) &#123;<br>      <span class="hljs-keyword">const</span> cur = nums[i];<br>      <span class="hljs-keyword">if</span> (i &gt; pivot &amp;&amp; cur === nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>      recursion(track.concat([cur]), i + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  recursion([], <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="93-复原-IP-地址"><a href="#93-复原-IP-地址" class="headerlink" title="93.复原 IP 地址"></a>93.复原 IP 地址</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> restoreIpAddresses = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-keyword">var</span> backTrack = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">pivot, track, pre, count</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (pivot === s.length) &#123;<br>      <span class="hljs-keyword">if</span> (count === <span class="hljs-number">3</span>) &#123;<br>        res.push(track + pre);<br>      &#125;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Number</span>(pre + s[pivot]) &lt; <span class="hljs-number">256</span>) &#123;<br>      <span class="hljs-keyword">if</span> (pre) &#123;<br>        backTrack(pivot, track + pre + <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, count + <span class="hljs-number">1</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (pre !== <span class="hljs-string">&quot;0&quot;</span>) &#123;<br>        backTrack(pivot + <span class="hljs-number">1</span>, track, pre + s[pivot], count);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      backTrack(pivot, track + pre + <span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, count + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;;<br><br>  backTrack(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100.相同的树"></a>100.相同的树</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isSameTree = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">p, q</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!p &amp;&amp; !q) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!p || !q) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">if</span> (p.val !== q.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isSymmetric = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">root</span>) </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">p, q</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!p &amp;&amp; !q) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!p || !q) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span> (p.val !== q.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> recursion(p.left, q.right) &amp;&amp; recursion(q.left, p.right);<br>  &#125;<br>  <span class="hljs-keyword">return</span> recursion(root, root);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxDepth = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">root</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> max = <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">recursion</span>(<span class="hljs-params">node, depth</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!node) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (depth + <span class="hljs-number">1</span> &gt; max) &#123;<br>      max = depth + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> left = node.left;<br>    <span class="hljs-keyword">const</span> right = node.right;<br>    <span class="hljs-keyword">if</span> (left) &#123;<br>      recursion(left, depth + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (right) &#123;<br>      recursion(right, depth + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  recursion(root, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> max;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="118-杨辉三角"><a href="#118-杨辉三角" class="headerlink" title="118.杨辉三角"></a>118.杨辉三角</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> generate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">numRows</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-keyword">let</span> curRow = [<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">let</span> nextRow = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; numRows; i++) &#123;<br>    res.push(curRow);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; i + <span class="hljs-number">2</span>; j++) &#123;<br>      nextRow.push((curRow[j - <span class="hljs-number">1</span>] || <span class="hljs-number">0</span>) + (curRow[j] || <span class="hljs-number">0</span>));<br>    &#125;<br>    curRow = nextRow;<br>    nextRow = [];<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="119-杨辉三角-II"><a href="#119-杨辉三角-II" class="headerlink" title="119.杨辉三角 II"></a>119.杨辉三角 II</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getRow = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">rowIndex</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = [<span class="hljs-number">1</span>];<br>  <span class="hljs-keyword">let</span> nextRow;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; rowIndex; i++) &#123;<br>    nextRow = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; i + <span class="hljs-number">2</span>; j++) &#123;<br>      nextRow.push((res[j - <span class="hljs-number">1</span>] || <span class="hljs-number">0</span>) + (res[j] || <span class="hljs-number">0</span>));<br>    &#125;<br>    res = nextRow;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="120-三角形最小路径和"><a href="#120-三角形最小路径和" class="headerlink" title="120.三角形最小路径和"></a>120.三角形最小路径和</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> minimumTotal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">triangle</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = triangle.length;<br>  <span class="hljs-keyword">let</span> dp = [];<br><br>  <span class="hljs-comment">// 最后一行</span><br>  dp = triangle[len - <span class="hljs-number">1</span>];<br><br>  <span class="hljs-comment">// 倒数第二行开始向上</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = len - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; i + <span class="hljs-number">1</span>; j++) &#123;<br>      dp[j] = <span class="hljs-built_in">Math</span>.min(dp[j], dp[j + <span class="hljs-number">1</span>]) + triangle[i][j];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121.买卖股票的最佳时机"></a>121.买卖股票的最佳时机</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxProfit = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">prices</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> minPrice = prices[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> maxRange = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; prices.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = prices[i];<br>    <span class="hljs-keyword">const</span> pre = prices[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">const</span> diff = cur - pre;<br>    <span class="hljs-keyword">if</span> (diff &lt; <span class="hljs-number">0</span>) &#123;<br>      minPrice = cur &lt; minPrice ? cur : minPrice;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (diff &gt; <span class="hljs-number">0</span>) &#123;<br>      maxRange = getThreeMax(maxRange, diff, cur - minPrice);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> maxRange;<br>&#125;;<br><br><span class="hljs-keyword">var</span> getThreeMax = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>    <span class="hljs-keyword">return</span> a &gt; c ? a : c;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> b &gt; c ? b : c;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122.买卖股票的最佳时机 II"></a>122.买卖股票的最佳时机 II</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxProfit = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">prices</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; prices.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> cur = prices[i];<br>    <span class="hljs-keyword">const</span> pre = prices[i - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (cur &gt; pre) &#123;<br>      sum += cur - pre;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125.验证回文串"></a>125.验证回文串</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isPalindrome = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> right = s.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">const</span> a = s[left];<br>    <span class="hljs-keyword">const</span> b = s[right];<br>    <span class="hljs-keyword">if</span> (isValidStr(a) &amp;&amp; isValidStr(b)) &#123;<br>      <span class="hljs-keyword">if</span> (a.toLowerCase() !== b.toLowerCase()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      left++;<br>      right--;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!isValidStr(a)) left++;<br>    <span class="hljs-keyword">if</span> (!isValidStr(b)) right--;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br><span class="hljs-keyword">var</span> isDigit = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> ((d &lt;= <span class="hljs-string">&quot;z&quot;</span> &amp;&amp; d &gt;= <span class="hljs-string">&quot;a&quot;</span>) || (d &lt;= <span class="hljs-string">&quot;Z&quot;</span> &amp;&amp; d &gt;= <span class="hljs-string">&quot;A&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br><span class="hljs-keyword">var</span> isNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">isNaN</span>(d) &amp;&amp; d !== <span class="hljs-string">&quot; &quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br><span class="hljs-keyword">var</span> isValidStr = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (isDigit(d) || isNumber(d)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="134-加油站"><a href="#134-加油站" class="headerlink" title="134.加油站"></a>134.加油站</h2><p>首先要有直觉这是时间复杂度 O(n)就可以完成的事情，遍历 gas，算出 gas 和 cost 的差值。<br>差值相加的结果 sum&lt;0 说明不存在编号，否则返回 sum 最小时的 i 的后一个数（因为 index 唯一）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> canCompleteCircuit = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">gas, cost</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = gas.length;<br>  <span class="hljs-keyword">let</span> index;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> min = <span class="hljs-built_in">Number</span>.MAX_VALUE;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-keyword">const</span> dif = gas[i] - cost[i];<br>    sum += dif;<br>    <span class="hljs-keyword">if</span> (sum &lt; min) &#123;<br>      index = i;<br>      min = sum;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum &lt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : (index + <span class="hljs-number">1</span>) % len;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136.只出现一次的数字"></a>136.只出现一次的数字</h2><ol><li>散列表</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> singleNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> cur <span class="hljs-keyword">of</span> nums) &#123;<br>    <span class="hljs-keyword">if</span> (map.has(cur)) &#123;<br>      map.delete(cur);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      map.set(cur);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> map.keys()) &#123;<br>    <span class="hljs-keyword">return</span> key;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>位运算——异或</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> singleNumber = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> cur <span class="hljs-keyword">of</span> nums) &#123;<br>    res ^= cur;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reverseWords = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> start = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = s.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">debugger</span>;<br>    <span class="hljs-keyword">const</span> cur = s[i];<br>    <span class="hljs-keyword">if</span> (cur !== <span class="hljs-string">&quot; &quot;</span>) &#123;<br>      str = cur + str;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (str) count++;<br>      <span class="hljs-keyword">if</span> (count === <span class="hljs-number">1</span>) &#123;<br>        res += (start ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot; &quot;</span>) + str;<br>        start = <span class="hljs-literal">false</span>;<br>        str = <span class="hljs-string">&quot;&quot;</span>;<br>        count = <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (str) res += (start ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot; &quot;</span>) + str;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="152-乘积最大子数组"><a href="#152-乘积最大子数组" class="headerlink" title="152.乘积最大子数组"></a>152.乘积最大子数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> maxProduct = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> dpMax = [];<br>  <span class="hljs-keyword">let</span> dpMin = [];<br>  <span class="hljs-keyword">let</span> max = nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">let</span> cur;<br>    <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) &#123;<br>      dpMax[i] = nums[<span class="hljs-number">0</span>];<br>      dpMin[i] = nums[<span class="hljs-number">0</span>];<br>      cur = nums[<span class="hljs-number">0</span>];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>) &#123;<br>        cur = <span class="hljs-built_in">Math</span>.max(nums[i] * dpMax[i - <span class="hljs-number">1</span>], nums[i]);<br>        dpMax[i] = <span class="hljs-built_in">Math</span>.max(nums[i] * dpMax[i - <span class="hljs-number">1</span>], nums[i]);<br>        dpMin[i] = <span class="hljs-built_in">Math</span>.min(nums[i] * dpMin[i - <span class="hljs-number">1</span>], nums[i]);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        cur = <span class="hljs-built_in">Math</span>.max(nums[i] * dpMin[i - <span class="hljs-number">1</span>], nums[i]);<br>        dpMax[i] = <span class="hljs-built_in">Math</span>.max(nums[i] * dpMin[i - <span class="hljs-number">1</span>], nums[i]);<br>        dpMin[i] = <span class="hljs-built_in">Math</span>.min(nums[i] * dpMax[i - <span class="hljs-number">1</span>], nums[i]);<br>      &#125;<br>    &#125;<br>    max = <span class="hljs-built_in">Math</span>.max(max, cur);<br>  &#125;<br>  <span class="hljs-keyword">return</span> max;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="162-寻找峰值"><a href="#162-寻找峰值" class="headerlink" title="162.寻找峰值"></a>162.寻找峰值</h2><ol><li>递归</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> findPeakElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> length = nums.length;<br><br>  <span class="hljs-keyword">var</span> recursion = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">start, end</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (start === end) <span class="hljs-keyword">return</span> start;<br>    <span class="hljs-keyword">const</span> len = end - start + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> m = getMid(len) + start;<br>    <span class="hljs-keyword">if</span> (nums[m] &gt; nums[m + <span class="hljs-number">1</span>]) &#123;<br>      <span class="hljs-keyword">return</span> recursion(start, m);<br>    &#125;<br>    <span class="hljs-keyword">return</span> recursion(m + <span class="hljs-number">1</span>, end);<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> recursion(<span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>);<br>&#125;;<br><br><span class="hljs-keyword">var</span> getMid = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">len</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> len / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (len - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>&#125;;<br><br><span class="hljs-keyword">var</span> getMid = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">len</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (len % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> len / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (len - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>迭代</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> findPeakElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> length = nums.length;<br><br>  <span class="hljs-keyword">let</span> start = <span class="hljs-number">0</span>,<br>    end = length - <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>    <span class="hljs-keyword">const</span> len = end - start + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> m = getMid(len) + start;<br>    <span class="hljs-keyword">if</span> (nums[m] &gt; nums[m + <span class="hljs-number">1</span>]) &#123;<br>      end = m;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      start = m + <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> start;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167.两数之和 II - 输入有序数组"></a>167.两数之和 II - 输入有序数组</h2><p>有序数组，使用双指针<br>时间复杂度 O(n),空间复杂度 O(1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums: number[], target: number</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> left = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> right = nums.length - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-keyword">const</span> sum = nums[left] + nums[right];<br>    <span class="hljs-keyword">if</span> (sum === target) <span class="hljs-keyword">return</span> [left + <span class="hljs-number">1</span>, right + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &gt; target) &#123;<br>      right--;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      left++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169.多数元素"></a>169.多数元素</h2><p>投票算法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> majorityElement = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">let</span> res = nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> cur <span class="hljs-keyword">of</span> nums) &#123;<br>    <span class="hljs-keyword">if</span> (count === <span class="hljs-number">0</span>) res = cur;<br>    <span class="hljs-keyword">if</span> (cur === res) count++;<br>    <span class="hljs-keyword">else</span> count--;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="172-阶乘后的零"><a href="#172-阶乘后的零" class="headerlink" title="172.阶乘后的零"></a>172.阶乘后的零</h2><p>数 5 的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> trailingZeroes = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> q = <span class="hljs-number">5</span>;<br>  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (q &lt;= n) &#123;<br>    <span class="hljs-keyword">const</span> c = <span class="hljs-built_in">Math</span>.floor(n / q);<br>    count += c;<br>    q *= <span class="hljs-number">5</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> count;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189.旋转数组"></a>189.旋转数组</h2><p>考虑特殊情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rotate = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums, k</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> nums;<br>  <span class="hljs-keyword">if</span> (k &gt; len) k = k % len;<br>  <span class="hljs-keyword">let</span> pre = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    pre.push(nums[i]);<br>    <span class="hljs-keyword">const</span> index = len - k + i;<br>    <span class="hljs-keyword">if</span> (index &lt; len) &#123;<br>      nums[i] = nums[index];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      nums[i] = pre[i - k];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> nums;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="191-位-1-的个数"><a href="#191-位-1-的个数" class="headerlink" title="191.位 1 的个数"></a>191.位 1 的个数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> hammingWeight = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> ((n &amp; <span class="hljs-number">1</span>) === <span class="hljs-number">1</span>) &#123;<br>      sum++;<br>    &#125;<br>    n &gt;&gt;= <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sum;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a>198.打家劫舍</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> rob = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">nums</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> len = nums.length;<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">if</span> (len === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">let</span> dp = [nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]];<br>  <span class="hljs-keyword">let</span> max = <span class="hljs-built_in">Math</span>.max(nums[<span class="hljs-number">0</span>], nums[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt; nums.length; i++) &#123;<br>    <span class="hljs-keyword">const</span> curTotal = dp[<span class="hljs-number">0</span>] + nums[i];<br>    max = <span class="hljs-built_in">Math</span>.max(curTotal, dp[<span class="hljs-number">1</span>]);<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-built_in">Math</span>.max(dp[<span class="hljs-number">1</span>], dp[<span class="hljs-number">0</span>]);<br>    dp[<span class="hljs-number">1</span>] = curTotal;<br>  &#125;<br>  <span class="hljs-keyword">return</span> max;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用react来编写2048游戏</title>
    <link href="/2019/04/19/react-2048/"/>
    <url>/2019/04/19/react-2048/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="https://qzrzvvy8w6.codesandbox.io/">在线预览</a></li><li><a href="https://codesandbox.io/s/qzrzvvy8w6">代码</a></li><li>技术栈: react &amp; react hooks</li></ul><a id="more"></a><ul><li>目录结构：<br>|– src/<br>| |– components/<br>| | |– Board/———–棋盘<br>| | | |– index.js<br>| | | |– styles.css<br>| | |– Square———–棋子<br>| | | |– index.js<br>| | | |– styles.css<br>| |– index.js———–文件入口</li></ul><p>第一次用 react 写东西，有不对的请指正</p><h2 id="结构设定"><a href="#结构设定" class="headerlink" title="结构设定"></a>结构设定</h2><ol><li><p>4*4 的棋盘，用 16 位的一维数组 squares 来表示: new Array(16).fill(0)</p></li><li><p>Board:<br>由三部分组成：分数、棋盘、按钮<br>棋盘的棋子部分引入 Square 组件</p></li></ol><p><img src="https://i.loli.net/2019/04/19/5cb96b36bacb9.png" alt="Board"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Square <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../components/Square/index&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Board</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> [squares, setSquares] = useState(setDefaultChess()); <span class="hljs-comment">//棋子</span><br>  <span class="hljs-keyword">const</span> [score, setScore] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">//分数</span><br>  <span class="hljs-keyword">const</span> [gameFailed, setGameFailed] = useState(<span class="hljs-literal">false</span>); <span class="hljs-comment">//是否失败</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">renderSquare</span>(<span class="hljs-params">i</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Square</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;squares[i]&#125;</span> /&gt;</span></span>;<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=<span class="hljs-string">&quot;Board&quot;</span>&gt;<br>      &#123;<span class="hljs-comment">/* 分数 */</span>&#125;<br>      &#123;gameFailed ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>FAIL!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span> : <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>score:&#123;score&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span>&#125;<br>      &#123;<span class="hljs-comment">/* 棋盘 */</span>&#125;<br>      &lt;div className=<span class="hljs-string">&quot;Board-item&quot;</span>&gt;<br>        &lt;div className=<span class="hljs-string">&quot;board-row&quot;</span>&gt;<br>          &#123;renderSquare(<span class="hljs-number">0</span>)&#125;<br>          &#123;renderSquare(<span class="hljs-number">1</span>)&#125;<br>          &#123;renderSquare(<span class="hljs-number">2</span>)&#125;<br>          &#123;renderSquare(<span class="hljs-number">3</span>)&#125;<br>        &lt;/div&gt;<br>        ...<br>      &lt;/div&gt;<br>      &#123;<span class="hljs-comment">/* 按钮 */</span>&#125;<br>      &lt;div className=<span class="hljs-string">&quot;new-game&quot;</span> onClick=&#123;newGame.bind(<span class="hljs-built_in">this</span>)&#125;&gt;<br>        <span class="hljs-keyword">new</span> game<br>      &lt;/div&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Board;<br></code></pre></td></tr></table></figure><ol start="3"><li>Square:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Square</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> classColor = <span class="hljs-string">`color<span class="hljs-subst">$&#123;props.value&#125;</span>`</span>; <span class="hljs-comment">//颜色</span><br>  <span class="hljs-keyword">let</span> visibilityHidden = props.value ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;visibilityHidden&quot;</span>; <span class="hljs-comment">//为0不显示数据</span><br><br>  <span class="hljs-keyword">return</span> (<br>    &lt;div className=&#123;<span class="hljs-string">`button-square <span class="hljs-subst">$&#123;classColor&#125;</span>`</span>&#125;&gt;<br>      &lt;span className=&#123;visibilityHidden&#125;&gt;&#123;props.value&#125;&lt;/span&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Square;<br></code></pre></td></tr></table></figure><h2 id="react-hooks-的使用"><a href="#react-hooks-的使用" class="headerlink" title="react hooks 的使用"></a>react hooks 的使用</h2><h3 id="useEffect-和-useRef"><a href="#useEffect-和-useRef" class="headerlink" title="useEffect 和 useRef"></a>useEffect 和 useRef</h3><p>用<code>useEffect</code>这个钩子来完成原来 <code>componentDidMount</code> 的任务（但不完全相等，后面会解释）：</p><ol><li>监听键盘事件，当触发上下左右时，按情况将一维数组处理成二维数组</li><li>调用(合并)算法，计算分数并将合并后新的二维数组返回，按情况处理成一维数组</li><li>更新棋子</li><li>随机生成一个新棋子</li><li>判断棋盘是不是满了，如果是，调用(失败)算法校验游戏是否结束</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">useEffect(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> listener = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">switch</span> (e.keyCode) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">38</span>: <span class="hljs-comment">//上</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">40</span>: <span class="hljs-comment">//下</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">37</span>: <span class="hljs-comment">//左</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">39</span>: <span class="hljs-comment">//右</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;;<br>  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&quot;keyup&quot;</span>, listener);<br>  <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&quot;keyup&quot;</span>, listener);<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意<br>Effect 拿到的总是定义它的那次渲染中的 props 和 state。<br>具体请看<a href="https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/">这里</a></p><p>以上第 3 步执行后，squares 已经更新，但在第 4 步中取到的 squares 仍然是更新前的，但我们希望生成新棋子是在合并后的棋盘基础上，所以使用 useRef 来保存更新后的值。<br><code>const curSquares = useRef(squares);</code><br>同理第 4~5 步</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [squares, setSquares] = useState(setDefaultChess()); <span class="hljs-comment">//棋子</span><br><span class="hljs-keyword">const</span> [score, setScore] = useState(<span class="hljs-number">0</span>); <span class="hljs-comment">//分数</span><br><span class="hljs-keyword">const</span> [gameFailed, setGameFailed] = useState(<span class="hljs-literal">false</span>); <span class="hljs-comment">//是否失败</span><br></code></pre></td></tr></table></figure><p>点击按钮时，将 squares、score、gameFailed 都设为初始状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newGame</span>(<span class="hljs-params"></span>) </span>&#123;<br>  setSquares(setDefaultChess());<br>  setScore(<span class="hljs-number">0</span>);<br>  setGameFailed(<span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>这是 2048 最重要的逻辑，以向左事件为例：</p><p>所有数据向左跑，所以数据分为四组，每一行单独进行合并运算，那每一行的逻辑是：<br><img src="https://i.loli.net/2019/04/19/5cb96f10362ad.png" alt="move"></p><ol><li>遍历行数组，取下标 j 为当前位置，从当前位置的下一个位置（取下标为 t）开始，找第一个非 0 的位置；</li><li>如果找到：</li><li>当前位置为 0，则当前位置与下一个位置的数互换（此处要将下标 j–，等于说下一次外循环还是从这个位置 j 开始）；</li><li>当前位置非 0 且与下一个位置的数相等，将当前位置的数*2，下一个位置的数置 0</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">resetChess</span>(<span class="hljs-params">paramsArr</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = paramsArr.slice();<br>  <span class="hljs-keyword">let</span> scoreCur = score;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>      <span class="hljs-comment">//j从0开始遍历数组</span><br>      <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> t = j + <span class="hljs-number">1</span>; t &lt; arr[i].length; t++) &#123;<br>        <span class="hljs-comment">//找j右侧第一个不为0的数</span><br>        <span class="hljs-keyword">if</span> (arr[i][t]) &#123;<br>          <span class="hljs-comment">//找到</span><br>          <span class="hljs-keyword">if</span> (arr[i][j] === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//j位置的值为0，交换</span><br>            arr[i][j] = arr[i][t];<br>            arr[i][t] = <span class="hljs-number">0</span>;<br>            flag = <span class="hljs-literal">true</span>;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i][j] === arr[i][t]) &#123;<br>            <span class="hljs-comment">//j位置的值和t位置的值相等，合并</span><br>            arr[i][j] *= <span class="hljs-number">2</span>;<br>            arr[i][t] = <span class="hljs-number">0</span>;<br>            scoreCur += arr[i][j];<br>          &#125;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (flag) &#123;<br>        <span class="hljs-comment">//flag为true，j指针不变</span><br>        j--;<br>      &#125;<br>    &#125;<br>  &#125;<br>  setScore(scoreCur);<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="失败"><a href="#失败" class="headerlink" title="失败"></a>失败</h3><p>棋盘满子的时候判断是否失败:</p><p>遍历数组，每个棋子相邻的上下左右都不和它相等则游戏结束。</p><p>简化一下就是 2、3、4 行的棋子和它相邻上方的棋子不相等 且 2，3，4 列的棋子和它相邻左边的棋子不相等 则游戏结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFail</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = curSquares.current.slice();<br>  <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i - <span class="hljs-number">4</span> &gt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (arr[i] === arr[i - <span class="hljs-number">4</span>]) &#123;<br>        <span class="hljs-comment">// console.log(90, i);</span><br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">4</span> !== <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-keyword">if</span> (arr[i] === arr[i + <span class="hljs-number">1</span>]) &#123;<br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有一些例如：检查棋盘是否满子、创造默认棋子、随机生成一个棋子、检查棋盘哪个位置没有棋子、上下左右移动时数据的分组等等不在此赘述</p><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li>给棋子的 button-squareclass 加一个 transition: 0.2s;，则每一个棋子的显示消失都有 0.2s 的渐隐时间</li><li>生成新棋子以及判断失败，必须要在合并棋盘之后，所以给他们加一个延时</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  setRandomChess(); <span class="hljs-comment">//生成随机新棋子</span><br>  <span class="hljs-keyword">if</span> (idFullBoard()) &#123;<br>    <span class="hljs-comment">//棋盘没有空格时判断是否失败</span><br>    <span class="hljs-keyword">if</span> (checkFail()) &#123;<br>      setGameFailed(<span class="hljs-literal">true</span>);<br>    &#125;<br>  &#125;<br>&#125;, <span class="hljs-number">200</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 Hexo 和 GitHub Pages 来建立自己的博客</title>
    <link href="/2019/03/05/new-blog/"/>
    <url>/2019/03/05/new-blog/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>git</li><li>node.js</li><li>hexo<br><code>mkdir hexo</code> 新建文件夹<br><code>cd hexo</code><br><code>yarn global add hexo</code> 或 <code>npm i -g hexo</code> 全局安装 hexo</li></ul><a id="more"></a><h2 id="创建本地文件"><a href="#创建本地文件" class="headerlink" title="创建本地文件"></a>创建本地文件</h2><ol><li><code>hexo init</code> 初始化一系列文件</li><li><code>hexo g</code> 生成静态页面</li><li><code>hexo s</code> 启动本地服务<br>在网页输入地址 <code>localhost:4000</code> 就可以看到本地的网页啦<br><img src="https://i.loli.net/2019/03/26/5c99871cdacfe.png" alt="preview"></li><li><code>hexo new &quot;new-page&quot;</code> 创建一篇文章</li><li><code>&lt;!--more--&gt;</code>标签可以使文章在主页中只展示前半部分</li></ol><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><p>你可以在<a href="https://hexo.io/themes/">这里</a>选择你喜欢的主题<br>我选择了<a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>:</p><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><ol><li><p>新建一个仓库,仓库名必须为 <code>[yourname].github.io</code><br><img src="https://i.loli.net/2019/03/26/5c9989508beba.png" alt="repo"></p></li><li><p>新增 SSH 密钥到 GitHub 帐户: <a href="https://docs.github.com/cn/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account">教程</a></p></li><li><p>修改项目配置文件 <code>_config.yml</code> 中的内容</p></li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol"> type:</span> git<br><span class="hljs-symbol"> repo:</span> git@github.com:yourname/yourname.github.io.git<br><span class="hljs-symbol"> branch:</span> master<br></code></pre></td></tr></table></figure><ol start="4"><li>上传到 github<br>安装发布插件:<code>yarn add hexo-deployer-git</code>或<code>npm install hexo-deployer-git --save</code><br>执行提交：</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br></code></pre></td></tr></table></figure><ol start="5"><li>修改<code>package.json</code>文件，scripts 下加一行命令：<br><code>&quot;d&quot;: &quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy&quot;</code><br>每次执行<code>yarn d</code>，就等于执行第四步中提交命令。</li></ol><h2 id="使用个人域名"><a href="#使用个人域名" class="headerlink" title="使用个人域名"></a>使用个人域名</h2><ol><li><p>先选择一个自己喜欢的域名购买（购买后需要实名认证）</p></li><li><p>认证成功后需要解析域名</p></li><li><p>点击解析<br><img src="https://i.loli.net/2019/03/26/5c999ae043a1b.png" alt="domain"></p></li><li><p>点击添加纪录<br><img src="https://i.loli.net/2019/03/26/5c999b251c2cd.png" alt="record"></p></li><li><p>记录类型选择 CNAME<br>记录值填写 github 的地址<br><img src="https://i.loli.net/2019/03/26/5c999b74759bb.png" alt="cname"></p></li><li><p>在本地博客文件夹中的 source 文件中新建一个 CNAME 文件，在里面写上你的域名,然后再部署一次 <code>yarn d</code></p></li><li><p>进入 github 项目，点击 settings，往下拉找到 github pages，在 custom domain 中填写你的域名并保存，成功后就可以通过你的域名进入个人网站了</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
